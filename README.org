* emacsFlake
A flake for a configured emacs-daemon
** example of usage
cf. ~devos~ 'next-door'
- =flake.nix=
- =home/profiles/editor/emacs=
- =nixos/profiles/editor/emacs=
** devel-workflow
*** use a local flake
#+BEGIN_EXAMPLE nix
    emacsFlake = {
      url    = "/home/frank/DEVOSEMACS"; ### DEVEL
      # url  = "github:FrankBeu/emacs-flake";
    };
#+END_EXAMPLE
*** work as usual
**** snippets
***** in order to provide new or changed snippets,
- the snippets have to be added to ~git~
- the host-flake has to be updated
- the host has to be switched
- restart ~emacs~ or just  ~yas-reload-all~ =SPC y r=
***** XOR remount snippetFolder
#+BEGIN_EXAMPLE shell
sudo mount -B <LOCAL-FLAKE-DIR>/emacs.d/snippets ~/.emacs.d/snippets
#+END_EXAMPLE
- ~yas-reload-all~ =SPC y r=
**** elisp
just use ~eval-last-sexp~ =C-X C-E=
*** commit, push, ...
*** use remote flake again
- update the host-flake
- switch the host
- restart emacs
*** check
** update host-flake
#+BEGIN_SRC shell :results drawer
nix flake lock --update-input emacsFlake
#+END_SRC
** TODO TODOS
*** TODO create ~lib~
- for all functions *not* included in the =init.el= via tangling
*** TODO create mechanism for importing packages not provided by ~emacs-overlay~
- replace packagesLocal
*** TODO rename =packagesLocal= -> =localPackages=

