* global-commands
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; global-commands
  ;;;;
  ;;
#+end_src
** copy filename
#+begin_src elisp
  (defun fb/yank-buffer-filename ()
    "Copy the current buffer's path to the kill ring."
    (interactive)
    (fb*yank-buffer-filename))
#+end_src
** reformatting
*** break-*
**** break-here
#+begin_src elisp
    (defun fb/break-here ()
      "break text at cursor"
      (interactive)
      (evil-backward-char)
      (insert "\n")
      (delete-char 1))
#+end_src
**** break-sentence
#+begin_src elisp
        (defun fb/break-sentence ()
          "break text at end of sentence"
          (interactive)
          (evil-forward-sentence-begin)
          (insert "\n"))
#+end_src
**** break-sub-sentence
#+begin_src elisp
          (defun fb/break-sub-sentence ()
            "break text at end of sub-sentence"
            (interactive)
            (setq beforeBreakpoint
                  (read-char "enter char before breakpoint: ,  ;  :  .  !  ?"))
            (pcase beforeBreakpoint
              (?,  (search-forward ",") (evil-forward-word-begin) (insert "\n"))
              (?:  (search-forward ":") (evil-forward-word-begin) (insert "\n"))
              (?\; (search-forward ";") (evil-forward-word-begin) (insert "\n"))
              (?.  (search-forward ".") (evil-forward-word-begin) (insert "\n"))
              (?!  (search-forward "!") (evil-forward-word-begin) (insert "\n"))
              (??  (search-forward "?") (evil-forward-word-begin) (insert "\n"))
              ))
#+end_src
** reload-config
#+begin_src elisp
(defun fb/reload-config ()
  "reload ~/.emacs.d/init.el interactively"
  (interactive)
  (fb*reload-config))
#+end_src
** toggle-whichKey-sort-order
#+begin_src elisp
  (defun fb/toggle-which-key-sort-order ()
    "Toggle whichKey-sort-order-alpha key - desc"
    (interactive)
    (fb*toggle-which-key-sort-order))
#+end_src
** dir-local-variables
#+begin_src emacs-lisp
  (defun fb/reload-dir-locals-current-buffer ()
    "reload dir-locals for the current buffer"
    (interactive)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))
#+end_src
#+begin_src elisp
  (defun fb/reload-dir-locals-all-directory-buffer ()
    "For every buffer with the same `default-directory` as the
  current buffer's, reload dir-locals."
    (interactive)
    (let ((dir default-directory))
      (dolist (buffer (buffer-list))
        (with-current-buffer buffer
          (when (equal default-directory dir))
          (my-reload-dir-locals-for-current-buffer)))))
#+end_src
