* global-misc 
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; global-misc
  ;;;;
  ;;
#+end_src
** safe local-vars
#+begin_src elisp
  (add-to-list 'safe-local-variable-values
             '(eval org-content 2)
             )
#+end_src

#+begin_src elisp
  (add-to-list 'safe-local-eval-forms
               '(org-content 3)
               )
#+end_src
** serverMode
always start emacs in server-mode
#+begin_src elisp
(server-start)
#+end_src
** window-splitting
#+begin_src elisp
;; (setq
;;  split-width-threshold 0
;;  split-height-threshold nil)
#+end_src
** yes-or-no to y-or-no
accept {y,n} as answer
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** calendar
*** start week on monday
#+begin_src elisp
(setq calendar-week-start-day 1)
#+end_src
*** show weekNumber
#+begin_src elisp
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil :height 1.0)
  (setq calendar-intermonth-text
        '(propertize
          (format "%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))
#+end_src
*** display label in header
#+begin_src elisp
    (copy-face 'default 'calendar-iso-week-header-face)
    (set-face-attribute 'calendar-iso-week-header-face nil :height 1.0)
    (setq calendar-intermonth-header
          (propertize "W"
                      'font-lock-face 'calendar-iso-week-header-face))
#+end_src
** misc
#+begin_src elisp
;; (setq inhibit-startup-screen t )    ;;; inhibit startup screen
(setq inhibit-startup-message t )      ;;; inhibit startup message
(setq initial-scratch-message "")      ;;; print a default message in the empty scratch buffer opened at startup
;; (setq ring-bell-function 'ignore )     ;;; silent bell when you make a mistake
;; (setq visible-bell t)                  ;;; visible bell when you make a mistake - doom-modeline takes care
(setq coding-system-for-read 'utf-8 )  ;;; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)   ;;; sentence SHOULD end with only a point.
(setq fill-column 80)                  ;;; toggle wrapping text at the 80th character
#+end_src
** personal
#+begin_src elisp
(defvar fb/domainName
"thesym.site"
  "my domain")
#+end_src
