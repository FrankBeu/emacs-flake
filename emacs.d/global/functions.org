* global-functions
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; global-functions
  ;;;;
  ;;
#+end_src
** reloadConfig
#+begin_src elisp
  (defun fb*reload-config ()
    "reload ~/.emacs.d/init.el"
    (load-file "~/.emacs.d/init.el"))
#+end_src
** toggle-whichKey-sort-order
switch order (alphabetical)
- by Key
- by Descripion
#+begin_src elisp
(defun fb*toggle-which-key-sort-order ()
  "Toggle whichKey-sort-order-alpha key - desc"
  (setq which-key-sort-order
	(if (eq which-key-sort-order 'which-key-key-order-alpha) 'which-key-description-order 'which-key-key-order-alpha)))
#+end_src
** copy file-names
https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html
*** path
=/foo/bar/bas.el= -> =/foo/bar/bas.el=
#+begin_src elisp
  (defun fb*yank-file-path ()
    "Copy the current buffer's path to the kill ring."
    (let ((path (abbreviate-file-name buffer-file-name)))
      (kill-new path)
      (message path))
    )
#+end_src
*** path-with-cursor
=/foo/bar/bas.el=; cursor on 15:15 -> =/foo/bar/bas.el:15:15=
#+begin_src elisp
  (defun fb*yank-file-path-with-cursor-position ()
    "Copy the current buffer's path with cursor-position to the kill ring."
    (let ((path (abbreviate-file-name buffer-file-name))
          (cursor-position (concat (number-to-string (line-number-at-pos)) ":" (number-to-string (current-column))))
          )
      (let ((path-with-cursor-position (concat path ":" cursor-position))
            )
        (kill-new path-with-cursor-position)
        (message path-with-cursor-position)
        )
      )
    )
#+end_src
*** directory-path
=/foo/bar/bas.el= -> =/foo/bar/=
#+begin_src elisp
  (defun fb*yank-file-directory-path ()
    "Copy the current buffer's directory-path to the kill ring."
    (let ((dirpath (file-name-directory buffer-file-name)))
      (kill-new dirpath)
      (message dirpath))
    )
#+end_src
*** filename
=/foo/bar/bas.el= -> =bas.el=
#+begin_src elisp
  (defun fb*yank-file-filename ()
    "Copy the current buffer's filename to the kill ring."
    (let ((filename (file-name-nondirectory buffer-file-name)))
      (kill-new filename)
      (message filename))
    )
#+end_src
*** basename
=/foo/bar/bas.el= -> =bas=
#+begin_src elisp
  (defun fb*yank-file-basename ()
    "Copy the current buffer's basename to the kill ring."
    (let ((basename (file-name-base buffer-file-name)))
      (kill-new basename)
      (message basename))
    )
#+end_src
*** extension
=/foo/bar/bas.el= -> =el=
#+begin_src elisp
  (defun fb*yank-file-extension ()
    "Copy the current buffer's extension to the kill ring."
    (let ((extension (replace-regexp-in-string ".*\\." "" (file-name-nondirectory buffer-file-name))))
      (kill-new extension)
      (message extension))
    )
#+end_src
*** dirname
=/foo/bar/bas.el= -> =bar=
#+begin_src elisp
  (defun fb*yank-file-dirname ()
    "Copy the current buffer's dirname to the kill ring."
    (let ((dirname (file-name-nondirectory (directory-file-name (file-name-directory buffer-file-name)))))
      (kill-new dirname)
      (message dirname))
    )
#+end_src
*** attribute-chain
=/segments/test/foo/bar/default.nix= -> =test.foo.bar=
used for DEVOS tests
#+BEGIN_SRC elisp
  (defun fb*yank-file-attribute-chain ()
    "Copy the current buffer's path as attribut-chain to the kill ring."
    (let* (
           (regexes '(
                      ("\/" . ".")
                      ("\.$" . "")
                      (".*tests" . "tests")
                      ))
           (attribute-chain (seq-reduce
                             (lambda (string regexp-replacement-pair)
                               (replace-regexp-in-string (car regexp-replacement-pair) (cdr regexp-replacement-pair) string nil 'literal))
                             regexes
                             (file-name-directory buffer-file-name))))
      (kill-new attribute-chain)
      (message attribute-chain))
    )
#+END_SRC
** alignment
#+begin_src elisp
;; modified function from http://emacswiki.org/emacs/AlignCommands
(defun spacemacs/align-repeat (start end regexp &optional justify-right after)
  "Repeat alignment with respect to the given regular expression.
If JUSTIFY-RIGHT is non nil justify to the right instead of the
left. If AFTER is non-nil, add whitespace to the left instead of
the right."
  (interactive "r\nsAlign regexp: ")
  (let* ((ws-regexp (if (string-empty-p regexp)
                        "\\(\\s-+\\)"
                      "\\(\\s-*\\)"))
         (complete-regexp (if after
                              (concat regexp ws-regexp)
                            (concat ws-regexp regexp)))
         (group (if justify-right -1 1)))

    (unless (use-region-p)
      (save-excursion
        (while (and
                (string-match-p complete-regexp (thing-at-point 'line))
                (= 0 (forward-line -1)))
          (setq start (point-at-bol))))
      (save-excursion
        (while (and
                (string-match-p complete-regexp (thing-at-point 'line))
                (= 0 (forward-line 1)))
          (setq end (point-at-eol)))))

    (align-regexp start end complete-regexp group 1 t)))

;; Modified answer from http://emacs.stackexchange.com/questions/47/align-vertical-columns-of-numbers-on-the-decimal-point
(defun spacemacs/align-repeat-decimal (start end)
  "Align a table of numbers on decimal points and dollar signs (both optional)"
  (interactive "r")
  (require 'align)
  (align-region start end nil
                '((nil (regexp . "\\([\t ]*\\)\\$?\\([\t ]+[0-9]+\\)\\.?")
                       (repeat . t)
                       (group 1 2)
                       (spacing 1 1)
                       (justify nil t)))
                nil))

(defmacro spacemacs|create-align-repeat-x (name regexp &optional justify-right default-after)
  (let* ((new-func (intern (concat "spacemacs/align-repeat-" name)))
         (new-func-defn
          `(defun ,new-func (start end switch)
             (interactive "r\nP")
             (let ((after (not (eq (if switch t nil) (if ,default-after t nil)))))
               (spacemacs/align-repeat start end ,regexp ,justify-right after)))))
    (put new-func 'function-documentation "Created by `spacemacs|create-align-repeat-x'.")
    new-func-defn))

(spacemacs|create-align-repeat-x "comma"              ","        nil  t )
(spacemacs|create-align-repeat-x "semicolon"          ";"        nil  t )
(spacemacs|create-align-repeat-x "colon"              ":"        nil  t )
(spacemacs|create-align-repeat-x "equal"              "="               )
(spacemacs|create-align-repeat-x "math-oper"          "[+\\-*/]"        )
(spacemacs|create-align-repeat-x "percent"            "%"               )
(spacemacs|create-align-repeat-x "ampersand"          "&"               )
(spacemacs|create-align-repeat-x "bar"                "|"               )
(spacemacs|create-align-repeat-x "left-paren"         "("               )
(spacemacs|create-align-repeat-x "right-paren"        ")"             t )
(spacemacs|create-align-repeat-x "left-curly-brace"   "{"               )
(spacemacs|create-align-repeat-x "right-curly-brace"  "}"             t )
(spacemacs|create-align-repeat-x "left-square-brace"  "\\["             )
(spacemacs|create-align-repeat-x "right-square-brace" "\\]"           t )
(spacemacs|create-align-repeat-x "backslash"          "\\\\"            )
#+end_src
** sorting
#+begin_src elisp
(defun spacemacs/uniquify-lines ()
  "Remove duplicate adjacent lines in a region or the current buffer"
  (interactive)
  (save-excursion
    (save-restriction
      (let* ((region-active (or (region-active-p) (evil-visual-state-p)))
             (beg (if region-active (region-beginning) (point-min)))
             (end (if region-active (region-end) (point-max))))
        (goto-char beg)
        (while (re-search-forward "^\\(.*\n\\)\\1+" end t)
          (replace-match "\\1"))))))

(defun spacemacs/sort-lines (&optional reverse)
  "Sort lines in a region or the current buffer.
A non-nil argument sorts in reverse order."
  (interactive "P")
  (let* ((region-active (or (region-active-p) (evil-visual-state-p)))
         (beg (if region-active (region-beginning) (point-min)))
         (end (if region-active (region-end) (point-max))))
    (sort-lines reverse beg end)))

(defun spacemacs/sort-lines-reverse ()
  "Sort lines in reverse order, in a region or the current buffer."
  (interactive)
  (spacemacs/sort-lines -1))

(defun spacemacs/sort-lines-by-column (&optional reverse)
  "Sort lines by the selected column,
using a visual block/rectangle selection.
A non-nil argument sorts in REVERSE order."
  (interactive "P")
  (if (and
       ;; is there an active selection
       (or (region-active-p) (evil-visual-state-p))
       ;; is it a block or rectangle selection
       (or (eq evil-visual-selection 'block) (eq rectangle-mark-mode t))
       ;; is the selection height 2 or more lines
       (>= (1+ (- (line-number-at-pos (region-end))
                  (line-number-at-pos (region-beginning)))) 2))
      (sort-columns reverse (region-beginning) (region-end))
    (error
     "Sorting by column requires a block/rect selection on 2 or more lines.")))

(defun spacemacs/sort-lines-by-column-reverse ()
  "Sort lines by the selected column in reverse order,
using a visual block/rectangle selection."
  (interactive)
  (spacemacs/sort-lines-by-column -1))
#+end_src
** transform
*** brackets to braces
#+begin_src elisp
  (defun fb*transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
    (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform))
    )
#+end_src
