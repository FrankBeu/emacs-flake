* global-commands
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; global-commands
  ;;;;
  ;;
#+end_src
** copy buffer-names
*** path
=/foo/bar/bas.el= -> =/foo/bar/bas.el=
#+begin_src elisp
  (defun fb/yank-file-path ()
    "Copy the current buffer's path to the kill ring."
    (interactive)
    (fb*yank-file-path)
    )
#+end_src
*** path-with-cursor
=/foo/bar/bas.el=; cursor on 15:15 -> =/foo/bar/bas.el:15:15=
#+begin_src elisp
  (defun fb/yank-file-path-with-cursor-position ()
    "Copy the current buffer's path with cursor-position to the kill ring."
    (interactive)
    (fb*yank-file-path-with-cursor-position)
    )
#+end_src
*** directory-path
=/foo/bar/bas.el= -> =/foo/bar/=
#+begin_src elisp
  (defun fb/yank-file-directory-path ()
    "Copy the current buffer's directory-path to the kill ring."
    (interactive)
    (fb*yank-file-directory-path)
    )
#+end_src
*** filename
=/foo/bar/bas.el= -> =bas.el=
#+begin_src elisp
  (defun fb/yank-file-filename ()
    "Copy the current buffer's filename to the kill ring."
    (interactive)
    (fb*yank-file-filename)
    )
#+end_src
*** basename
=/foo/bar/bas.el= -> =bas=
#+begin_src elisp
  (defun fb/yank-file-basename ()
    "Copy the current buffer's basename to the kill ring."
    (interactive)
    (fb*yank-file-basename)
    )
#+end_src
*** extension
=/foo/bar/bas.el= -> =el=
#+begin_src elisp
  (defun fb/yank-file-extension ()
    "Copy the current buffer's extension to the kill ring."
    (interactive)
    (fb*yank-file-extension)
    )
#+end_src
*** dirname
=/foo/bar/bas.el= -> =bar=
#+begin_src elisp
  (defun fb/yank-file-dirname ()
    "Copy the current buffer's dirname to the kill ring."
    (interactive)
    (fb*yank-file-dirname)
    )
#+end_src
*** attribute-chain
=/segments/test/foo/bar/default.nix= -> =test.foo.bar=
used for DEVOS tests
#+begin_src elisp
  (defun fb/yank-file-attribute-chain ()
    "Copy the current buffer's path as attribut-chain to the kill ring."
    (interactive)
    (fb*yank-file-attribute-chain)
    )
#+end_src
** reformatting
*** break-*
**** break-here
#+begin_src elisp
    (defun fb/break-here ()
      "break text at cursor"
      (interactive)
      (evil-backward-char)
      (insert "\n")
      (delete-char 1))
#+end_src
**** break-sentence
#+begin_src elisp
        (defun fb/break-sentence ()
          "break text at end of sentence"
          (interactive)
          (evil-forward-sentence-begin)
          (insert "\n"))
#+end_src
**** break-sub-sentence
#+begin_src elisp
          (defun fb/break-sub-sentence ()
            "break text at end of sub-sentence"
            (interactive)
            (setq beforeBreakpoint
                  (read-char "enter char before breakpoint: ,  ;  :  .  !  ?"))
            (pcase beforeBreakpoint
              (?,  (search-forward ",") (evil-forward-word-begin) (insert "\n"))
              (?:  (search-forward ":") (evil-forward-word-begin) (insert "\n"))
              (?\; (search-forward ";") (evil-forward-word-begin) (insert "\n"))
              (?.  (search-forward ".") (evil-forward-word-begin) (insert "\n"))
              (?!  (search-forward "!") (evil-forward-word-begin) (insert "\n"))
              (??  (search-forward "?") (evil-forward-word-begin) (insert "\n"))
              ))
#+end_src
** reload-config
#+begin_src elisp
(defun fb/reload-config ()
  "reload ~/.emacs.d/init.el interactively"
  (interactive)
  (fb*reload-config))
#+end_src
** toggle-whichKey-sort-order
#+begin_src elisp
  (defun fb/toggle-which-key-sort-order ()
    "Toggle whichKey-sort-order-alpha key - desc"
    (interactive)
    (fb*toggle-which-key-sort-order))
#+end_src
** dir-local-variables
#+begin_src elisp
  (defun fb/reload-dir-locals-current-buffer ()
    "reload dir-locals for the current buffer"
    (interactive)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))
#+end_src
#+begin_src elisp
  (defun fb/reload-dir-locals-all-directory-buffer ()
    "For every buffer with the same `default-directory` as the
  current buffer's, reload dir-locals."
    (interactive)
    (let ((dir default-directory))
      (dolist (buffer (buffer-list))
        (with-current-buffer buffer
          (when (equal default-directory dir))
          (fb/reload-dir-locals-current-buffer)))))
#+end_src
** inflection
*** capitalize-word
#+begin_src elisp
  (defun fb/titlecase-word ()
    (interactive)
    (progn
      (evil-backward-word-begin)
      (capitalize-word 1)
      ))
#+end_src
*** lowercase-word
#+begin_src elisp
  (defun fb/downcase-word ()
    (interactive)
    (progn
      (evil-backward-word-begin)
      (downcase-word 1)
      ))
#+end_src
*** uppercase-word
#+begin_src elisp
  (defun fb/upcase-word ()
    (interactive)
    (progn
      (evil-backward-word-begin)
      (upcase-word 1)
      ))
#+end_src
** debugging
*** find last executed command
#+begin_src elisp
(defun fb/describe-last-function()
  (interactive)
  (describe-function last-command))
#+end_src
**** there is also =M-x command-history=

