* global-misc 
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; global-misc
  ;;;;
  ;;
#+end_src
** calendar
*** start week on monday
#+begin_src elisp
(setq calendar-week-start-day 1)
#+end_src
*** show weekNumber
#+begin_src elisp
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil :height 1.0)
  (setq calendar-intermonth-text
        '(propertize
          (format "%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))
#+end_src
*** display label in header
#+begin_src elisp
    (copy-face 'default 'calendar-iso-week-header-face)
    (set-face-attribute 'calendar-iso-week-header-face nil :height 1.0)
    (setq calendar-intermonth-header
          (propertize "W"
                      'font-lock-face 'calendar-iso-week-header-face))
#+end_src
** ediff
*** controlpanel
#+begin_src elisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
*** side-by-side
#+begin_src elisp
  (setq ediff-split-window-function (quote split-window-horizontally))
#+end_src
** misc
#+begin_src elisp
  ;; (setq inhibit-startup-screen t )    ;;; inhibit startup screen
  (setq inhibit-startup-message t )      ;;; inhibit startup message
  (setq initial-scratch-message "")      ;;; print a default message in the empty scratch buffer opened at startup
  ;; (setq ring-bell-function 'ignore )     ;;; silent bell when you make a mistake
  ;; (setq visible-bell t)                  ;;; visible bell when you make a mistake - doom-modeline takes care
  (setq coding-system-for-read 'utf-8 )  ;;; use utf-8 by default
  (setq coding-system-for-write 'utf-8 )
  (setq sentence-end-double-space nil)   ;;; sentence SHOULD end with only a point.
  (setq fill-column 80)                  ;;; toggle wrapping text at the 80th character
  (setq truncate-lines t)                ;;; start buffer with lines displayed truncated
#+end_src
** personal
#+begin_src elisp
(defvar fb/domainName
"thesym.site"
  "my domain")
#+end_src
** safe local-vars
*** warnings
#+BEGIN_SRC elisp
;; (setq enable-local-variables :safe)
(setq enable-local-variables :maybe)
#+END_SRC
**** prevent warnings - apply safe variables
#+BEGIN_SRC elisp :tangle no :exports none
(setq enable-local-variables :safe)
#+END_SRC
**** debugging: enable warnings
#+BEGIN_SRC elisp :tangle no :exports none
(setq enable-local-variables :maybe)
#+END_SRC
*** set safe-variables
**** safe values
#+BEGIN_SRC elisp
  (setf safe-local-variable-values (cl-list*
                                    '(org-content                                                    . 2                                                      )
                                    '(org-content                                                    . 3                                                      )
                                    '(org-export-with-section-numbers                                . nil                                                    )
                                    '(org-export-with-toc                                            . nil                                                    )
                                    '(org-fb-re-reveal-talk-url-show-anchor-on-title-slide           . nil                                                    )
                                    '(org-fb-re-reveal-talk-url-show-qrCode-and-anchor-on-last-slide . t                                                      )
                                    '(org-fb-re-reveal-talk-url-show-qrCode-on-title-slide           . nil                                                    )
                                    '(org-re-reveal-single-file                                      . t                                                      )
                                    '(org-re-reveal-title-slide                                      . "~/.emacs.d/orgmode/revealjs/revealjs.titleSlide.html" )
                                    safe-local-variable-values))
#+END_SRC
**** safe as long as it is a string
#+BEGIN_SRC elisp
  (put 'org-fb-re-reveal-talk-url 'safe-local-variable #'stringp)
  (put 'org-re-reveal-extra-css   'safe-local-variable #'stringp)
  (put 'default-input-method      'safe-local-variable #'stringp)
#+END_SRC
**** safe local eval
#+BEGIN_SRC elisp
  (add-to-list 'safe-local-eval-forms
               '(setq-local org-re-reveal-extra-css (expand-file-name "~/.emacs.d/orgmode/revealjs/revealjs.css"))
               )

#+END_SRC
extra-css does not work with ~ directly
stringp does not work either
#+BEGIN_SRC elisp :tangle no :exports none
;; '(setq-local org-re-reveal-extra-css (expand-file-name #'stringp))
#+END_SRC
not working either:
#+BEGIN_EXAMPLE elisp
'(evil-set-register 100 "dwidropfdbl") ;; macro d  for toggle(drop,keep) (traefik.toml)
'(evil-set-register 107 "dwikeepfdbl") ;; macro k  for toggle(drop,keep) (traefik.toml)
#+END_EXAMPLE
**** FUNDUS
#+BEGIN_SRC elisp :tangle no :exports none
  ;; (add-to-list 'safe-local-variable-values
  ;;            '(eval org-content 2)
  ;;            )

  ;; (add-to-list 'safe-local-eval-forms
  ;;              '(org-content 3)
  ;;              )
#+END_SRC
*** develWorkflow
- load config with ~C-X C-E~
- open another buffer e.g. =./functions.org=
  - reload with ~SPC b r~
** custom
#+BEGIN_SRC elisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
#+END_SRC
** serverMode
always start emacs in server-mode
#+begin_src elisp
(server-start)
#+end_src
** tramp
https://www.emacswiki.org/emacs/TrampMode
https://www.gnu.org/software/tramp/#Overview
*** INFO
**** needs a dumb prompt
c.f. =.config/zsh/.preztorc=
#+begin_example shell
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return
#+end_example
**** debugging
#+begin_src elisp :tangle no :exports none
;; (setq tramp-debug-buffer t)
;; (setq tramp-verbose 10)
#+end_src
**** USAGE
***** OR
****** needs =~/.ssh/config=
=C-x C-f= /ssh:HOSTNAME:/home/USER/TMP/t
****** with full URL
=C-x C-f= /ssh:USER@IP#PORT:/home/USER/TMP/t
****** emacs-bookmarks
=SPC b l= nuc =RET=
** yes-or-no to y-or-no
accept {y,n} as answer
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** wrap-region
https://github.com/rejeep/wrap-region.el
#+BEGIN_SRC elisp
  (use-package wrap-region
    :config
    (wrap-region-global-mode t)
    )
#+END_SRC
*** keybinding
[[file:~/.emacs.d/keys/global-leader.org::*keys-global-leader][keys-global-leader]]
=SPC W=
*** org: [[file:~/.emacs.d/orgmode/babel.org::*wrapping][wrapping]]
** CANCELLED window-splitting
#+begin_src elisp
;; (setq
;;  split-width-threshold 0
;;  split-height-threshold nil)
#+end_src
