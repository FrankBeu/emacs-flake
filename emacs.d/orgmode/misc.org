* orgmode-misc
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; orgmode-misc
  ;;;;
  ;;
#+end_src
** hide emphasis-markers `*BOLD*`
#+begin_src elisp
  (setq org-hide-emphasis-markers t)
#+end_src
** notes-Dir
#+begin_src elisp
  (defvar fb/notesDir
  (expand-file-name "~/NOTES/")
    "The file path to the org-notes-files")
#+end_src
** subtree-elipsis
*** TODO fix: delete trailing whitespace will remove "  ▼", too
#+begin_src elisp
  (setq org-ellipsis
        ;; " ▾"
        ;; " ▽"
        "  ▼"
        ;; "  ◦◦◦"
        )
#+end_src
** org-superstar
#+begin_src elisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list
     ;; '("◉" "○" "●" "○" "●" "○" "●")
     ;; '("●" "◉" "○" "●" "◉" "○" "●")
     ;; '("●")
     ;; '("◉")
     '("○")
     )
    (org-superstar-item-bullet-alist
     '(
       ;; (?- . ?•)
       (?\u002D . ?\u2022)

       ;; (?+ . ?➤)
       (?\u002B . ?\u27A4)
       ;; (?+ . ?▶)
       ;; (?+ . ?▷)
       ;; (?+ . ?▸)
       ;; (?+ . ?▹)
       ;; (?+ . ?►)
       ;; (?+ . ?▻)
       ;; (?+ . ?◉)
       ;; (?+ . ?○)
       ;; (?+ . ?◌)
       ;; (?+ . ?◍)
       ;; (?+ . ?◎)
       ;; (?+ . ?●)

       ;; (?* . ?•)
       (?\u002A . ?\u2022)
       )
     )
    )
#+end_src
**** restart
=M-x= ~org-superstar-restart~
** contrib
#+BEGIN_SRC elisp
  (use-package org-contrib
    :after org
    )
#+END_SRC
** global-properties
efford
#+begin_src elisp
    (setq org-global-properties '(
                                  ("Effort_ALL". " 0:05 0:10 0:15 0:30 1:00 1:30 3:00 5:00 7:30 13:00 21:00")
                               ;;;; pomodoro buildingBlocks 1    2    4    6    10   16   26
                               ;; ("Effort_ALL". " 0:05 0:10 0:15 0:30 1:00 2:00 3:00 5:00 8:00 13:00")

                                  ("COOKIE_DATA". "todo recursive")                         ;;;; use todo instead of list; count all subtree entries
                                  ;; ("ORDERED". "t")
                                  ))

#+end_src
*** FUNDUS
#+begin_src elisp :tangle no :exports none

    ;;;;
    ;;;; Effort and global properties
    ;;

    ;;;; stolen
    ;; (setq org-global-properties '(("Effort_ALL". "0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 6:00 8:00")))

    ;;;; own
    ;; (setq org-global-properties '(("Effort_ALL". "0:05 0:10 0:30 1:00 2:00 3:00 4:00 5:00 8:00 0")))

    ;;;; pomodoro
    ;;;; 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    ;;;; |s|s|s| |s|s|s| |s|s|s| |s|s|s| |s|s|s| |s|s|s| |s|s|s| |s|s|s| |s|s
    ;;;;                                           buildingBlocks 1    2    3    51L  8L2   13L3 21L5  34L8
#+end_src
** indentation
   indent subtrees and text
#+begin_src elisp
  (setq org-startup-indented t)
#+end_src
** images
*** set width of images displayed in org-files

#+BEGIN_SRC elisp
(setq org-image-actual-width (list 650))
#+END_SRC

**** can be overridden with
#+BEGIN_EXAMPLE org
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300px
#+ATTR_LATEX: :width 300px
#+END_EXAMPLE

** TOC
#+begin_src elisp
  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))
#+end_src
** calfw-org
calendar
https://github.com/kiwanami/emacs-calfw#for-org-users
#+begin_src elisp
  (use-package calfw-org
    :config
    (setq cfw:org-face-agenda-item-foreground-color (fb*getDefaultColorValue :base8))
    )
#+end_src
*** TODO disable line-numbers
*** TODO colors
** links
*** use linking with an unique id
#+BEGIN_SRC elisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+END_SRC
**** INFO
[[https://emacs.stackexchange.com/questions/51755/org-mode-link-files-with-ids-and-not-filenames][Org-Mode: Link files with IDs and not Filenames - Emacs Stack Exchange]]
***** storage-file
=.org-id-locations= in your =user-emacs-directory=
***** invalidate cache
~org-id-update-id-locations~
****** EXAMPLE
#+BEGIN_SRC elisp :tangle no :exports none
;; (org-id-update-id-locations (directory-files-recursively org-roam-directory ".org$\\|.org.gpg$"))
#+END_SRC
** TODO structure-templates
  https://orgmode.org/manual/Structure-Templates.html
  https://blog.aaronbieber.com/2016/11/23/creating-org-mode-structure-templates.html
#+begin_src elisp
  (add-to-list 'org-structure-template-alist '("sh"   . "src sh"))
  (add-to-list 'org-structure-template-alist '("el"   . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc"   . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts"   . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py"   . "src python"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("go"   . "src go"))
  (add-to-list 'org-structure-template-alist '("rt"   . "src rust"))
  (add-to-list 'org-structure-template-alist '("dt"   . "src dart"))
#+end_src
** notifications - desktop
*** org-wild-notifier
https://github.com/akhramov/org-wild-notifier.el
#+begin_src elisp
  (use-package org-wild-notifier
    :hook (org-mode . org-wild-notifier-mode)
    :config
    (setq
      alert-default-style 'libnotify
      org-wild-notifier-alert-times-property 'NOTIFY
    )
  )
#+end_src
*** alternatives
**** org-notify
#+begin_src elisp :tangle no :exports none
  ;; (use-package org-notify
    ;; :config (org-notify-start))
#+end_src
**** org-alert
https://github.com/spegoraro/org-alert
** TODO doct
https://github.com/progfolio/doct
** DEPRECATED depend
https://orgmode.org/worg/org-contrib/org-depend.html
use [[file:padma.org::*orgmode-padmā][orgmode-padmā]]
#+begin_src elisp :tangle no :exports none
  ;; (require 'org-depend)

  ;; (defun fb/org-insert-trigger ()
  ;;   "Automatically insert chain-find-next trigger when entry becomes NEXT"
  ;;   (cond ((equal org-state "NEXT")
  ;;          (unless org-depend-doing-chain-find-next
  ;;            (org-set-property "TRIGGER" "chain-find-next(NEXT,from-current,priority-up,effort-down)")))
  ;;         ((not (member org-state org-done-keywords))
  ;;          (org-delete-property "TRIGGER"))))

  ;; (add-hook 'org-after-todo-state-change-hook 'fb/org-insert-trigger)
#+end_src
** TODO org-drill
flashcards (like anki)
https://orgmode.org/worg/org-contrib/org-drill.html
** TODO org-memacs
https://github.com/novoid/Memacs
** TODO org-manage
https://github.com/dmgerman/org-manage
** TODO org-hacks
https://orgmode.org/worg/org-hacks.html
** TODO enable .webp-display in org-mode-files
** hook
*** hook-function
#+begin_src elisp
  (defun fb*org-mode-h ()
    (fb*default-company-backends-h)
    (company-mode)
    )
#+end_src
*** hook
#+begin_src elisp
  (add-hook 'org-mode-hook 'fb*org-mode-h)
#+end_src
