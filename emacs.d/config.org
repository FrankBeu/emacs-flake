#+TITLE: emacs Configuration
* emacsConfiguration
** INFO
*** tramp
**** WORKING
#+begin_example
C-x C-f /:HOST:/home/<USER>/TMP/t
#+end_example
needs entry with user and port in  =~/.ssh/config=
**** NOT WORKING syntax with port
=C-x C-f= /ssh:<USER>@<IP>#<PORT>:/<PATH>
***** assumption:
needs password; does not work with key
*** styleGuide
**** elisp
**** naming
***** doom
[[https://github.com/doomemacs/doomemacs/blob/master/docs/contributing.org#naming-conventions][doomemacs/docs/contributing.org at master · doomemacs/doomemacs]]
- ~doom/abc~ A public, interactive command, designed to be used via =M-x= or a keybinding.
- ~doom:abc~ A public evil operator, motion or command.
- ~doom|abc~ A public, non-interactive function meant to be used as a hook.
- ~doom*abc~ Functions designed to be used as advice for other functions.
- ~abc!~ A public Doom "autodef" function or macro.
  An autodef should always be defined, even if its containing module is disabled
  (i.e. they will not throw a void-function error).
  The purpose of this is to avoid peppering module configs with conditionals or ~after!~ blocks before using their APIs.
  They should noop if their module is disabled, and should be zero-cost in the case their module is disabled.
  Autodefs usually serve to configure Doom or a module. [and are usually syntactic sugar]
- Functions prefixed with ~+abc...~ belong to a module, e.g. ~+emacs-lisp|init-hook~ is a hook function in the ~lang/emacs-lisp~ module.
- ~=abc~ An interactive command that invokes an app module.
****** lisp
- (~namespace-abc~  regular symbols)
- (~namespace--abc~ private symbols)
***** spacemacs
 https://develop.spacemacs.org/doc/CONVENTIONS.html
***** TODO variables
****** ??
******* use ::
cf. rust
******* use .
**** org-mode
***** =verbatim=    ---   ~code~   ::    `=verbatim=' and `~code~'
=●= == key-sequences and text, paths or file names - markup rather than code
~●~ ~~ functions and variables commands
****** TODO check project
**** function-naming
***** keep names
- doom
- spacemacs
***** disregarding the origin all other functions
are prefixed by =fb=
***** don't touch packages
** TODO TODOS
*** CRASH cannot open \*.el-buffer  after \*.org-buffer
when \*.el-buffer is opened first then  \*.org-buffer then other \*.el-buffer can be opened
**** suspicion
related to flycheck
cf. go-mode
**** TODO bisect config
*** TODO global
**** TODO check undo behaviour
**** TODO [#A] use gccEmacs
https://github.com/nix-community/emacs-overlay
https://www.emacswiki.org/emacs/GccEmacs#h5o-6
https://gist.github.com/mjlbach/179cf58e1b6f5afcb9a99d4aaf54f549
***** TODO needs emacsOverlay
*** TODO exclude {undo,motions} from dot-operator
**** orgmode
- =gj=
*** TODO create overview
all TODO-items in =.emacs.d=
**** ???
***** org-projectile
https://github.com/IvanMalison/org-projectile
***** agenda
via =.dir-locals.el=
https://emacs.stackexchange.com/questions/10012/a-search-interface-for-org-mode-files#answer-10017
***** advanced searching
https://orgmode.org/worg/org-tutorials/advanced-searching.html
***** todo-projectile
https://github.com/WolfeCub/todo-projectile
***** fixmee
https://github.com/rolandwalker/fixmee
*** TODO orgmode
**** TODO structure-editing
***** TODO demote
**** TODO motion
***** TODO =gj=
***** TODO =gk=
**** TODO editing
***** TODO emphasize
*** TODO magit
**** TODO navigation
***** TODO rebase buffer
*** TODO byte-compile everything
*** TODO which-key
**** BUG cannot use paging
** initialisation
*** package-loading
#+begin_src elisp
  (require 'package)
#+end_src
*** disable deferred compilation
all packages are precompiled
#+begin_src elisp
  (setq comp-deferred-compilation nil)
#+end_src
**** TODO localPackages / spacemacs
*** make unpure packages archives unavailable
#+begin_src elisp
  (setq package-archives nil)
#+end_src
*** use-package
#+begin_src elisp
  (setq package-enable-at-startup nil)
  (package-initialize 'no-activate)
  (eval-when-compile
    (require 'use-package))
#+end_src
*** improve garbage-collection
#+begin_src elisp
(let ((gc-cons-threshold (* 50 1000 1000))
      (gc-cons-percentage 0.6)
      (file-name-handler-alist nil)))
#+end_src
** tangling
#+INCLUDE: "./tangling/tangling.org"
*** INFO
**** TangleOrder
src-blocks will be tangled alphabetically
#+begin_src elisp :tangle no :exports none :exports none
#+end_src
#+begin_src emacs-lisp :tangle no :exports none :exports none
#+end_src
#+begin_src go :tangle no :exports none :exports none
#+end_src
always use elisp instead of emacs-lisp
**** :tangle no :exports none
including files will remove all ~:tangle no :exports none~ statements.
always use with ~:exports none~
** debugging
#+begin_src elisp
  ;; (setq debug-on-error t)
  ;; (setq debug-ignored-error t)
#+end_src
*** INFO
**** Errors
***** Message
Reading at buffer position N
***** response
=M-x= ~goto-char~ N RET
** functions: loadConfig
#+begin_src elisp
  (defun fb*getPathToConfigFile (filename)
    "Returns concatenation of \"HOME\" , \".emacs.d/\" and the passed \"filename\"."
    (expand-file-name filename (expand-file-name ".emacs.d" (getenv "HOME"))))
  (defun fb*loadConfigFile (configFileName)
    "Load the config-file associated with the passed configFileName if it exists."
    (let ((pathToConfigFile (fb*getPathToConfigFile configFileName)))
      (if (file-readable-p pathToConfigFile) (load pathToConfigFile) (message "WARNING: CONFIG-FILE NOT FOUND: %s" pathToConfigFile))
      ))
#+end_src
*** TODO remove
** INCLUDES
!! order matters !!
numbers in parens are rebuildOrder in case of MCA
*** completion (6)
#+INCLUDE: "./completion/completion.org"
*** themes (3)
#+INCLUDE: "./themes/themes.org"
*** evil (2)
#+INCLUDE: "./evil/evil.org"
*** global (2)
#+INCLUDE: "./global/global.org"
*** languages (7)
#+INCLUDE: "./languages/languages.org"
*** modeline (4)
#+INCLUDE: "./modeline/modeline.org"
*** orgmode (9)
#+INCLUDE: "./orgmode/orgmode.org"
*** project (5)
#+INCLUDE: "./project/project.org"
*** tex (8)
**** TODO move to langs
#+INCLUDE: "./tex/tex.org"
*** view (3)
#+INCLUDE: "./view/view.org"
*** keys (1)
#+INCLUDE: "./keys/keys.org"
*** tail
**** message about accidentally tangled blocks
#+BEGIN_SRC elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; all non-lisp-code after this message shouldn't be there
  ;;;; find the org-babel-block in the sources and add a :tangle no :exports none :exports none

#+END_SRC
