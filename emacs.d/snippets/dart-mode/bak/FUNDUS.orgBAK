* DONE test-snippets
** Test_Bloc_Bloc_Builder
#+BEGIN_SRC dart
  BlocBuilder<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}, $1State>(
    builder: (context, state) {
      return ${3:CONTAINER}();
    },
  )
  $0
#+END_SRC
** Test_Bloc_Bloc_Consumer
#+BEGIN_SRC dart
BlocConsumer<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))} $1State>(
  listener: (context, state) {
    ${3:// TODO: implement listener}
  },
  builder: (context, state) {
    return ${4:CONTAINER}();
  },
)
$0
#+END_SRC
** Test_Bloc_Bloc_Listener
#+BEGIN_SRC dart
BlocListener<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}, $1State>(
  listener: (context, state) {
    ${3:// TODO: implement listener}
  },
  child: ${4:CONTAINER}(),
)
$0
#+END_SRC
** Test_Bloc_Bloc_Provider
#+BEGIN_SRC dart
BlocProvider(
  create: (context) => ${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}(),
  child: ${3:CONTAINER}(),
)
#+END_SRC
** Test_Bloc_Bloc_Provider
#+BEGIN_SRC dart
BlocProvider.of<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}>(context)
$0
#+END_SRC
** Test_Bloc_Bloc_Selector
#+BEGIN_SRC dart
BlocSelector<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}, $1State, ${3:SELECTED}>(
  selector: (state) {
    return ${4:STATE};
  },
  builder: (context, state) {
    return ${5:CONTAINER}();
  },
)
$0
#+END_SRC
** Test_Bloc_Bloc_Test
#+BEGIN_SRC dart
blocTest<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}, $1State>(
  'emits [${3:MY-STATE}] when ${4:MY-EVENT} is added.',
  build: () => $1$2(),
  act: (bloc) => bloc.add($4()),
  expect: () => const <$1State>[$3()],
);
$0
#+END_SRC
** Test_Bloc_Context_Read
#+BEGIN_SRC dart
context.read<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}>()
$0
#+END_SRC
** Test_Bloc_Context_Select
#+BEGIN_SRC dart
context.select((${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))} ${3:ELEMENT}) => $3$4)
$0
#+END_SRC
** Test_Bloc_Context_Watch
#+BEGIN_SRC dart
context.watch<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}>()
$0
#+END_SRC
** Test_Bloc_Fake
#+BEGIN_SRC dart
class Fake${1:SUBJECT} extends Fake implements ${1} {}
$0
#+END_SRC
** Test_Bloc_Fake_Private
#+BEGIN_SRC dart
class _Fake${1:SUBJECT} extends Fake implements ${1} {}
$0
#+END_SRC
** Test_Bloc_Test_Import
#+BEGIN_SRC dart
import 'package:bloc_test/bloc_test.dart';
$0
#+END_SRC
** Test_Bloc_Import
#+BEGIN_SRC dart
import 'package:flutter_bloc/flutter_bloc.dart';
$0
#+END_SRC
** Test_Bloc_Mock
#+BEGIN_SRC dart
class Mock${1:SUBJECT} extends Mock implements ${1} {}
$0
#+END_SRC
** Test_Bloc_Mock_Bloc
#+BEGIN_SRC dart
class Mock${1:SUBJECT}Bloc extends MockBloc<${1}Event, ${1}State> implements ${1}Bloc {}
$0
#+END_SRC
** Test_Bloc_Mock_Bloc_Private
#+BEGIN_SRC dart
class _Mock${1:SUBJECT}Bloc extends MockBloc<${1}Event, ${1}State> implements ${1}Bloc {}
$0
#+END_SRC
** Test_Bloc_Mock_Cubit
#+BEGIN_SRC dart
class Mock${1:SUBJECT}Cubit extends MockCubit<${1}State> implements ${1}Cubit {}
$0
#+END_SRC
** Test_Bloc_Mock_Cubit_Private
#+BEGIN_SRC dart
class _Mock${1:SUBJECT}Cubit extends MockCubit<${1}State> implements ${1}Cubit {}
$0
#+END_SRC
** Test_Bloc_Mock_Private
#+BEGIN_SRC dart
class _Mock${1:SUBJECT} extends Mock implements ${1} {}
$0
#+END_SRC
** Test_Bloc_Multi_Bloc_Listener
#+BEGIN_SRC dart
MultiBlocListener(
  listeners: [
    BlocListener<${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}, $1State>(
      listener: (context, state) {
        ${3:// TODO: implement listener}
      },
    ),
    BlocListener<${4:SUBJECT}${5:$$(yas-choose-value '("Bloc" "Cubit"))} $4State>(
      listener: (context, state) {
        ${6:// TODO: implement listener}
      },
    ),
  ],
  child: ${7:CONTAINER}(),
)
$0
#+END_SRC
** Test_Bloc_Multi_Bloc_Provider
#+BEGIN_SRC dart
MultiBlocProvider(
  providers: [
    BlocProvider(
      create: (context) => ${1:SUBJECT}${2:$$(yas-choose-value '("Bloc" "Cubit"))}(),
    ),
    BlocProvider(
      create: (context) => ${3:SUBJECT}${4:$$(yas-choose-value '("Bloc" "Cubit"))}(),
    ),
  ],
  child: ${5:CONTAINER}(),
)
$0
#+END_SRC
** Test_Bloc_Multi_Repository_Provider
#+BEGIN_SRC dart
MultiRepositoryProvider(
  providers: [
    RepositoryProvider(
      create: (context) => ${1:SUBJECT}Repository(),
    ),
    RepositoryProvider(
      create: (context) => ${2:SUBJECT}Repository(),
    ),
  ],
  child: ${3:CONTAINER}(),
)
$0
#+END_SRC
** Test_Bloc_Repository_Provider
#+BEGIN_SRC dart
RepositoryProvider(
  create: (context) => ${1:SUBJECT}Repository(),
  child: ${2:CONTAINER}(),
)
$0
#+END_SRC
** Test_Bloc_Repository_Provider
#+BEGIN_SRC dart
RepositoryProvider.of<${1:SUBJECT}Repository>(context)
$0
#+END_SRC
** Test_Create_Widget
#+BEGIN_SRC dart
Widget createWidgetUnderTest() {
  return MaterialApp(
    ${1:SETUP}
  );
}
$0
#+END_SRC
** TesteR_Create_Widget_Pump
#+BEGIN_EXAMPLE dart
await tester.pumpWidget(createWidgetUnderTest());
$0
#+END_EXAMPLE
** TesteR_Pump
#+BEGIN_SRC dart
await tester.pump();
// await tester.pump(const Duration(milliseconds: 500));
$0
#+END_SRC
** TesteR_Pump_and_Settle
#+BEGIN_SRC dart
await tester.pumpAndSettle();
$0
#+END_SRC
** TesteR_Pump_Widget
#+BEGIN_SRC dart
// trpw TesteRPumpWidget
await tester.pumpWidget(${1:WIDGET});
$0
#+END_SRC
** Test_Expect_by_Key
#+BEGIN_SRC dart
expect(find.byKey(Key('${1:KEY}')), findsOneWidget);
$0
#+END_SRC
** Test_Given_When_Then
#+BEGIN_SRC dart
testWidgets('${1:DESCRIPTION}', harness((given, when, then) async {
  await given.${2:GIVEN};
  await when.${3:WHEN}();
  await then.${4:THEN}();
}));
$0
#+END_SRC
** Test_Imports
#+BEGIN_SRC dart
import 'package:flutter_test/flutter_test.dart';
import 'package:mocktail/mocktail.dart';
$0
#+END_SRC
** Test_Set_Up_All
#+BEGIN_SRC dart
setUpAll(() async {
  TestWidgetsFlutterBinding.ensureInitialized();
  $1
});
$0
#+END_SRC
** Test_System_Under_Test
#+BEGIN_SRC dart
import 'package:flutter_test/flutter_test.dart';
import 'package:mocktail/mocktail.dart';

void main() {
  late ${1:CLASS-NAME} sut;

  setUp(() {
    sut = $1();
  });
  $0
}
#+END_SRC
** Test_Widget
#+BEGIN_SRC dart
testWidgets(
    '${1:DESCRIPTION}',
    (WidgetTester tester) async {
        await tester.pumpWidget(${2:WIDGET});
        ${3:TEST}
    },
);
$0
#+END_SRC
