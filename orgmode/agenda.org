* orgmode-agenda
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; orgmode-agenda
  ;;;;
  ;;
#+end_src
** agenda
*** files
#+begin_src elisp
  (setq org-agenda-files '(
                           "~/NOTES"
                           ;; "~/NOTES/AKTUELLES.org"
                           ;; "~/NOTES/〇"
                           ;; "~/NOTES/PROJECTS"
                           ))
#+end_src
**** FUNDUS
#+begin_src elisp :tangle no
  ;; (setq org-agenda-files '("~/NOTES"))
#+end_src
#+begin_src elisp :tangle no
;; (setq org-agenda-files '(
;;                          "/home/frank/GTD/inbox.org"
;;                          "/home/frank/GTD/gtd.org"
;;                          "/home/frank/GTD/tickler.org"
;;                          ))

#+end_src
*** deadline
**** notifications
#+begin_src elisp
  (setq org-deadline-waring-days 14)
#+end_src
*** time-grid
#+begin_src elisp
(setq org-agenda-time-grid
      '((daily today require-timed)
        (0000 0200 0400 0600 0800 1000 1200 1400 1600 1800 2000 2200)
        "······" "────────────────"))
#+end_src
***** FUNDUS
#+begin_src elisp :tangle no
(setq org-agenda-time-grid
      '((daily today require-timed)
        (0000 0200 0400 0600 0800 1000 1200 1400 1600 1800 2000 2200)
        "......" "----------------"))
#+end_src
*** log
**** show log on start
#+begin_src elisp
  (setq org-agenda-start-with-log-mode t)
#+end_src
**** log-into-drawer
#+begin_src elisp
  (setq org-log-into-drawer t)
#+end_src
***** FUNDUS
#+begin_src elisp :tangle no
(setq org-log-into-drawer 'LOGBOOK)
#+end_src
**** files
#+begin_src elisp
  (setq org-log-done 'note)
#+end_src
** priority
#+begin_src elisp
  (setq org-priority-faces
    `(
      (65 :foreground ,(fb*getDefaultColorValue :red) :background ,(fb*getDefaultColorValue :bg))
      (66 :foreground ,(fb*getDefaultColorValue :yellow) :background ,(fb*getDefaultColorValue :bg))
      (67 :foreground ,(fb*getDefaultColorValue :yellow) :background ,(fb*getDefaultColorValue :bg))
      ;; (66 :foreground "black" :background "yellow")
      ;; (67 . "blue")
      ))
#+end_src
#+begin_src elisp :tangle no
(setq org-highest-priority ?1)
(setq org-lowest-priority ?6)
    ;;;; 6 is used as defaultstate for all nodes not given a priority/importance
(setq org-default-priority ?6)
#+end_src
** states
*** INFO
! is responsible for inserting timestamp @ for notes
*** keywords
#+begin_src elisp
(setq org-todo-keywords
      '(
        ;; (sequence "TODO(t)" "SUBTREE(s)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
        (sequence "TODO(t!)" "PENDING(p!)" "NEXT(n!)" "WIP(w!)" "|" "DONE(d@/!)" "CANCELLED(c@/!)" "DEPRECATED(e@/!)" "ARCHIVED(a)")
        (sequence "CRASH(C)" "BUG(B)" "REQUEST(R)" "TEST(E)" "|" "FIXED(F)")
        (sequence "BACKLOG(O)" "KONZEPTION(K)" "BEREIT(T)" "UMSETZUNG(U)" "ABNAHME(A)" "LIVE(L)" "|" "ERLEDIGT(D)")
        (sequence " (N)") ;;;; placeholder -> last line is not shown in buffer properly
        )
      )
#+end_src
*** faces
#+begin_src elisp :tangle no
        (defvar fb*base16-colors fb-base16-dracula-colors)
            (message "%s" (plist-get fb*base16-colors :base08))
        (setq fb*test (plist-get fb*base16-colors :base08))
      ;; (setq fb*test "#00f769")
            ;; (message "%s" fb*test)
        (setq org-todo-keyword-faces
              (list
                ;; `("TODO" . ,fb*test)                                     ;; WORKING
                ;; (cons "TODO" fb*test)                                     ;; WORKING
                ;; '("TODO" . "red")                                     ;; red
                ;; `("TODO" . ,(plist-get fb*base16-colors :base0B))
                `("TODO" . ,(fb*getDefaultColorValue :red))
                '("PENDING" . "orange")
                '("NEXT" . "red")
                '("WIP" . "yellow")
                '("DONE" . "green")
                '("CANCELLED" . "gray")
                '("DEPRECATED" . "black")
                '("ARCHIVED" . "gray")

                '("CRASH" . "red")
                '("BUG" . "red")
                '("REQUEST" . "turquoise")
                '("TEST" . "blue")
                '("FIXED" . "green")

                '("BACKLOG" . "blue")
                '("KONZEPTION" . "orange")
                '("BEREIT" . "orange")
                '("UMSETZUNG" . "red")
                '("ABNAHME" . "turquoise")
                '("LIVE" . "red")
                '("ERLEDIGT" . "green")
                )
              )
      ;; face                 (org-todo org-level-2)
#+end_src
#+begin_src elisp :tangle no
  ;; Set the cursor color based on the evil state
  (setq evil-emacs-state-cursor   `(,(plist-get my/base16-colors :base0D) box)
        evil-insert-state-cursor  `(,(plist-get my/base16-colors :base0D) bar)
        evil-motion-state-cursor  `(,(plist-get my/base16-colors :base0E) box)
        evil-normal-state-cursor  `(,(plist-get my/base16-colors :base0B) box)
        evil-replace-state-cursor `(,(plist-get my/base16-colors :base08) bar)
        evil-visual-state-cursor  `(,(plist-get my/base16-colors :base09) box))

    '(:base00 "#282936"
      :base01 "#3a3c4e"
      :base02 "#4d4f68"
      :base03 "#626483"
      :base04 "#62d6e8"
      :base05 "#e9e9f4"
      :base06 "#f1f2f8"
      :base07 "#f7f7fb"
      :base08 "#ea51b2"
      :base09 "#b45bcf"
      :base0A "#00f769"
      :base0B "#ebff87"
      :base0C "#a1efe4"
      :base0D "#62d6e8"
      :base0E "#b45bcf"
      :base0F "#00f769")


#+end_src
**** FUNDUS
***** misc
#+begin_src elisp :tangle no
  (setq org-todo-keyword-faces
        '(
          ;; "#1C1C1C"
          ;; "#eeeeee"
          ;; "Blue"
          ;; "Blue1"
          ;; "Cyan"
          ;; "DarkGoldenrod"
          ;; "Firebrick"
          ;; "LightGoldenrod"
          ;; "LightSkyBlue"
          ;; "Pink"
          ;; "Purple"
          ;; "Red1"
          ;; "blue"
          ;; "blue"
          ;; "chocolate1"
          ;; "gray"
          ;; "green"
          ;; "grey"
          ;; "orange"
          ;; "red"
          ;; "turquoise"
          ;; "turquoise1"
          ;; "white"
          ;; (:foreground "blue" :weight bold)
          ;; (:foreground "blue"  :background "grey90" :weight normal :slant normal :strike-through nil :underline nil :bold t :italic t)
          ;; (:foreground "blue"  :background "grey30" :weight bold :slant normal :strike-through nil :underline nil)
          ;; ("ERLEDIGT" . (:foreground "green" :background "cyan"   :weight bold :slant normal :strike-through t :underline t))

          ;; ("SUBTREE" . "grey")
          ;; ("WAIT" . "white")
          ;; ("CRASH" . "red")
          ;; ("BUG" . "red")
          ;; ("TEST" . "turquoise1")
          ;; ("CANCELED" . (:foreground "blue" :weight bold))
	)
#+end_src
***** my-orig
#+begin_src elisp :tangle no
  (setq org-todo-keyword-faces
        '(
          ("TODO" . "red")                                     ;; red
          ("PENDING" . "orange")
          ("NEXT" . "red")
          ("WIP" . "yellow")
          ("DONE" . "green")
          ("CANCELLED" . "gray")
          ("DEPRECATED" . "black")
          ("ARCHIVED" . "gray")

          ("CRASH" . "red")
          ("BUG" . "red")
          ("REQUEST" . "turquoise")
          ("TEST" . "blue")
          ("FIXED" . "green")

          ("BACKLOG" . "blue")
          ("KONZEPTION" . "orange")
          ("BEREIT" . "orange")
          ("UMSETZUNG" . "red")
          ("ABNAHME" . "turquoise")
          ("LIVE" . "red")
          ("ERLEDIGT" . "green")
          )
        )
#+end_src
** TODO FUNDUS
:LOGBOOK:
- State "TODO"       from              [2021-02-01 Mon 13:28]
:END:
#+begin_src elisp :tangle no
(setq org-agenda-category-icon-alist
      ;; `(("org" ,(list (all-the-icons-faicon "cogs")) nil nil :ascent center)))
      `(
        ("todo" ,(list (all-the-icons-material "check_box" :height 1.2)) nil nil :ascent center)
        ("task" ,(list (all-the-icons-material "check_box" :height 1.2)) nil nil :ascent center)
        ;; ("amazon" ,(list (all-the-icons-faicon "amazon" :height 1.2 :face 'all-the-icons-dorange)) nil nil :ascent center)
        ("amazon" ,(list (all-the-icons-faicon "amazon" :height 1 :face 'all-the-icons-orange)) nil nil :ascent center)
        ))

#+end_src
*** TODO IMPORTANCE
:LOGBOOK:
- State "TODO"       from              [2021-02-01 Mon 13:28]
:END:
(without temporal relation)
#+begin_src elisp :tangle no
(setq org-agenda-custom-commands
      '(
        ("1" "PRIORITY 1" tags "PRIORITY=\"1\"")
        ("2" "PRIORITY 2" tags "PRIORITY=\"2\"")
        ("3" "PRIORITY 3" tags "PRIORITY=\"3\"")
        ("4" "PRIORITY 4" tags "PRIORITY=\"4\"")
        ("5" "PRIORITY 5" tags "PRIORITY=\"5\"")
        ("c" "Desk Work" tags-todo "computer" ;; (1) (2) (3) (4)
         ((org-agenda-files '("~/org/widgets.org" "~/org/clients.org")) ;; (5)
          (org-agenda-sorting-strategy '(priority-up effort-down))) ;; (5) cont.
         ("~/computer.html")) ;; (6)
        ))
;; agenda view
;; (setq org-agenda-start-day "-1d")
(setq org-agenda-start-on-weekday nil)
(setq org-agenda-span 14)
#+end_src
#+begin_src elisp :tangle no
;;;; do not insert when state is changed to DONE:
;;;; CLOSED: [2020-04-30 Thu 23:39]
(setq org-log-done nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TODO-STATES

;;;; dependency between TODO-items
(require 'org-depend)

(defun own-add-todo-cookie ()
  "add a TODO-COOKIE to current line"
  (interactive)
  (goto-char (line-end-position))
  (insert " [/]")
  (beginning-of-line)
  (org-update-statistics-cookies ())
  )

#+end_src
*** TODO urgency
#+begin_src elisp

#+end_src
** TODO org-ql
:LOGBOOK:
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:19]
- State "TODO"       from              [2021-02-01 Mon 07:13]
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:05]
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:05]
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:05]
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:05]
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:04]
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:04]
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:03]
- State "TODO"       from "TODO"       [2021-02-01 Mon 07:03]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:55]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:54]
- State "TODO"       from              [2021-02-01 Mon 06:51]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:51]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:50]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:50]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:48]
- State "TODO"       from              [2021-02-01 Mon 06:48]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:48]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:48]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:48]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:47]
- State "TODO"       from "TODO"       [2021-02-01 Mon 06:47]
- State "TODO"       from              [2021-02-01 Mon 06:39]
- State "TODO"       from              [2021-02-01 Mon 06:39]
- State "TODO"       from              [2021-02-01 Mon 06:38]
:END:
https://github.com/alphapapa/org-ql
** test
:LOGBOOK:
- State "WIP"        from "NEXT"       [2021-02-01 Mon 05:15]
- State "NEXT"       from "PENDING"    [2021-02-01 Mon 05:15]
- State "PENDING"    from "TODO"       [2021-02-01 Mon 05:15]
- State "TODO"       from              [2021-02-01 Mon 05:15]
:END:
