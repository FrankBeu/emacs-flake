* orgmode-babel
** marker
#+BEGIN_SRC elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; orgmode-babel
  ;;;;
  ;;
#+END_SRC
** indentation
#+BEGIN_SRC elisp
(setq org-src-tab-acts-natively t)
#+END_SRC
** languages
*** arduino
https://github.com/stardiviner/arduino-mode
#+BEGIN_SRC elisp
  (use-package ob-arduino
    :config
    (add-to-list 'org-babel-load-languages  '(arduino . t))
    )
#+END_SRC
*** DEPRECATED browser
https://github.com/krisajenkins/ob-browser
#+BEGIN_SRC elisp
  (use-package ob-browser
    :config
    (add-to-list 'org-babel-load-languages  '(browser . t))
    )
#+END_SRC
*** c#
#+BEGIN_SRC elisp
  (use-package ob-csharp
    :config
    (add-to-list 'org-babel-load-languages  '(csharp . t))
    )
#+END_SRC
*** C++
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html
#+BEGIN_SRC elisp
  (use-package ob-C
    :config
    (add-to-list 'org-babel-load-languages  '(cpp . t))
    )
#+END_SRC
*** css
#+BEGIN_SRC elisp
  (use-package ob-css
    :config
    (add-to-list 'org-babel-load-languages  '(css . t))
    )
#+END_SRC
*** dart
https://github.com/mzimmerm/ob-dart
#+BEGIN_SRC elisp
  (use-package ob-dart
    :config
    (add-to-list 'org-babel-load-languages  '(dart . t))
    )
#+END_SRC
*** elisp
not nec
#+BEGIN_SRC elisp :tangle no
  ;; (use-package ob-emacs-lisp
  ;;   :config
  ;;   (add-to-list 'org-babel-load-languages  '(emacs-lisp . t))
  ;;   )
#+END_SRC
*** ein
https://github.com/millejoh/emacs-ipython-notebook#ob-ein
http://millejoh.github.io/emacs-ipython-notebook/
#+BEGIN_SRC elisp
  (use-package ein
    :config
    (add-to-list 'org-babel-load-languages  '(ein . t))
    )

  (use-package ein-notebook)
  (use-package ein-subpackages)
#+END_SRC
*** go
https://github.com/pope/ob-go
#+BEGIN_SRC elisp
  (use-package ob-go)
  (add-to-list 'org-babel-load-languages  '(go . t))
#+END_SRC
*** graphql
https://github.com/jdormit/ob-graphql
#+BEGIN_SRC elisp
  (use-package ob-graphql
    :config
    (add-to-list 'org-babel-load-languages  '(graphql . t))
    )
#+END_SRC
**** TODO also needs
https://github.com/davazp/graphql-mode
*** graphviz
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html
#+BEGIN_SRC elisp
  (use-package ob-dot
    :config
    (add-to-list 'org-babel-load-languages  '(dot . t))
    )
#+END_SRC
**** TODO also needs
https://github.com/davazp/graphql-mode
*** haskell
#+BEGIN_SRC elisp
  (use-package ob-haskell
    :config
    (add-to-list 'org-babel-load-languages  '(haskell . t))
    )
#+END_SRC
*** http
https://github.com/zweifisch/ob-http
#+BEGIN_SRC elisp
  (use-package ob-http
    :config
    (add-to-list 'org-babel-load-languages  '(http  . t))
    )
#+END_SRC
*** DEPRECATED ipython
CLOSED: [2021-10-23 Sat 09:46]
:LOGBOOK:
- State "DEPRECATED" from              [2021-10-23 Sat 09:46] \\
  not working; abandoned since 2018
:END:
https://github.com/gregsexton/ob-ipython
#+BEGIN_SRC elisp :tangle no
  ;; (use-package ob-ipython
    ;; :config
    ;; (add-to-list 'org-babel-load-languages  '(ipython . t))
    ;; )
#+END_SRC
*** java
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-java.html
#+BEGIN_SRC elisp
  (use-package ob-java
    :config
    (add-to-list 'org-babel-load-languages  '(java . t))
    )
#+END_SRC
*** js
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.html
uses ,#+BEGIN_SRC js
#+BEGIN_SRC elisp
  (use-package ob-js
    :config
    (add-to-list 'org-babel-load-languages  '(js . t))
    )
#+END_SRC
**** alt
https://github.com/zweifisch/ob-javascript
uses ,#+BEGIN_SRC javascript
not implemented
*** kotlin
#+BEGIN_SRC elisp
  (use-package ob-kotlin
    :config
    (add-to-list 'org-babel-load-languages  '(kotlin . t))
    )
#+END_SRC
*** latex
#+BEGIN_SRC elisp
  (use-package ob-latex
    :config
    (add-to-list 'org-babel-load-languages  '(latex . t))
    )
#+END_SRC
*** makefile
#+BEGIN_SRC elisp
  (use-package
    :config
    (add-to-list 'org-babel-load-languages  '(make . t))
    )
#+END_SRC
*** mermaid
https://github.com/arnm/ob-mermaid
#+BEGIN_SRC elisp
  (use-package ob-mermaid
    :config
    (add-to-list 'org-babel-load-languages  '(mermaid . t))
    )
#+END_SRC
**** also needs
mermaid.cli
*** mongo
https://github.com/krisajenkins/ob-mongo
#+BEGIN_SRC elisp
  (use-package ob-mongo
    :config
    (add-to-list 'org-babel-load-languages  '(mongo  . t))
    )
#+END_SRC
*** plantuml
#+BEGIN_SRC elisp
  (use-package ob-plantuml
    :config
    (setq org-plantuml-jar-path "/run/current-system/sw/lib/plantuml.jar")
    (add-to-list 'org-babel-load-languages  '(plantuml . t))
    )
#+END_SRC
*** python
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
#+BEGIN_SRC elisp
  (use-package ob-python
    :config
    (add-to-list 'org-babel-load-languages  '(python . t))
    )
#+END_SRC
*** redis
https://github.com/stardiviner/ob-redis
#+BEGIN_SRC elisp
  (use-package ob-redis
    :config
    (add-to-list 'org-babel-load-languages  '(redis . t))
    )
#+END_SRC
**** alternative
https://github.com/justinhj/eredis
*** restclient
https://github.com/alf/ob-restclient.el
#+BEGIN_SRC elisp
  (use-package ob-restclient
    :config
    (add-to-list 'org-babel-load-languages  '(restclient . t))
    :mode (("\\.http\\'" . restclient-mode))
    )
#+END_SRC
*** rust
https://github.com/micanzhang/ob-rust
not: https://github.com/zweifisch/ob-rust
needs rust-script
#+BEGIN_SRC elisp
  (use-package ob-rust
    :config
    (add-to-list 'org-babel-load-languages  '(rust . t))
    )
#+END_SRC
*** rustic
cf. [[file:~/.emacs.d/languages/rust.org::*rustic][rustic]]
*** sass
#+BEGIN_SRC elisp
  (use-package ob-sass
    :config
    (add-to-list 'org-babel-load-languages  '(sass . t))
    )
#+END_SRC
*** swift
#+BEGIN_SRC elisp
  (use-package ob-swift
    :config
    (add-to-list 'org-babel-load-languages  '(swift . t))
    )
#+END_SRC
*** shell
#+BEGIN_SRC elisp
  (use-package ob-shell
    :config
    (add-to-list 'org-babel-load-languages  '(shell . t))
    )
#+END_SRC
*** sql
#+BEGIN_SRC elisp :tangle no
  (use-package ob-sql
    :config
    (add-to-list 'org-babel-load-languages  '(sql . t))
    )
#+END_SRC
*** sqlite
#+BEGIN_SRC elisp
  (use-package ob-sqlite
    :config
    (add-to-list 'org-babel-load-languages  '(sqlite . t))
    )
#+END_SRC
*** translate
google-translate
https://github.com/krisajenkins/ob-translate
#+BEGIN_SRC elisp
  (use-package ob-translate
    :config
    (add-to-list 'org-babel-load-languages  '(translate  . t))
    )
  (use-package google-translate
    :config
    (setq google-translate-backend-method 'curl)
    (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
    )
#+END_SRC
*** typescript
https://github.com/lurdan/ob-typescript
#+BEGIN_SRC elisp
  (use-package ob-typescript
    :config
    (add-to-list 'org-babel-load-languages  '(typescript  . t))
    )
#+END_SRC
*** FUNDUS
**** ledger
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ledger.html
#+BEGIN_SRC elisp :tangle no
  (use-package
    :config
    (add-to-list 'org-babel-load-languages  '( . t))
    )
#+END_SRC
**** neo4j
https://github.com/zweifisch/ob-cypher
#+BEGIN_SRC elisp :tangle no
  (use-package
    :config
    (add-to-list 'org-babel-load-languages  '(cypher  . t))
    )
#+END_SRC
**** prolog
https://github.com/ljos/ob-prolog
#+BEGIN_SRC elisp :tangle no
  (use-package
    :config
    (add-to-list 'org-babel-load-languages  '(prolog  . t))
    )
#+END_SRC
**** load??
#+BEGIN_SRC elisp :tangle no
  (org-babel-do-load-languages 'org-babel-load-languages)
#+END_SRC
** examples
*** arduino
will upload the block to arduino
#+BEGIN_SRC arduino :tangle no
  // the setup function runs once when you press reset or power the board
  void setup() {
    // initialize digital pin LED_BUILTIN as an output.
    pinMode(LED_BUILTIN, OUTPUT);
  }

  // the loop function runs over and over again forever
  void loop() {
    digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
    delay(100);                       // wait for 0.1 second
    digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
    delay(100);                       // wait for 0.1 second
  }
#+END_SRC

#+RESULTS:

*** DEPRECATED browser
https://github.com/krisajenkins/ob-browser
phantomjs crashes
phantomjs is deprecated
#+BEGIN_SRC browser :out (concat user-emacs-directory "OUTPUT/babel/browser.png") :tangle no
  <!DOCTYPE html>
  <html>
      <head>
          <link href="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.2/css/bootstrap.min.css" rel="stylesheet" media="screen">
      </head>
      <body>
          <div class="row">
              <div class="span6 offset1">
                  <h1>Rendered PNG</h1>

                  <button class="btn btn-primary">You Can't Press This</button>
              </div>
          </div>
      </body>
  </html>
#+END_SRC
#+RESULTS:
[[file:~/.emacs.d/OUTPUT/babel/browser.png]]

*** c#
#+BEGIN_SRC csharp :tangle no
 class HelloWorld {
  public static void Main()
  {
    System.Console.WriteLine("Hello World!");
  }
}
#+END_SRC

#+RESULTS:
: Hello World!

*** C++
#+BEGIN_SRC cpp :tangle no
  #include <iostream>

int main() {
    std::cout << "Hello World!";
    return 0;
}
#+END_SRC

#+RESULTS:
: Hello World!

*** css
#+BEGIN_SRC css :tangle no
  :root {
    --main-fg-color: white;
  }

  body {
    color: var(--main-fg-color);
  }
#+END_SRC

#+RESULTS:
: :root {
:   --main-fg-color: white;
: }
:
: body {
:   color: var(--main-fg-color);
: }

*** dart
#+BEGIN_SRC dart :results output :tangle no
  var status = true;
  if (status) {
    print ('Status was true');
  } else {
    print('Status was false');
  }

  var test = "hello" + " there";
  print (test == "hello there");
  print (test == "not hello there");
#+END_SRC

#+RESULTS:
: Status was true
: true
: false

*** elisp
#+BEGIN_SRC elisp :tangle no
  (message "test")
#+END_SRC

#+RESULTS:
: test
*** ein
,#+BEGIN_SRC ein-python :session localhost :tangle no
#+BEGIN_SRC ein-python :session localhost:8888 :tangle no
  import numpy, math, matplotlib.pyplot as plt
  %matplotlib inline
  x = numpy.linspace(0, 2*math.pi)
  plt.plot(x, numpy.sin(x))
#+END_SRC

#+RESULTS:
: test
*** go
#+BEGIN_SRC go :results drawer :imports "fmt" :tangle no
 fmt.Println("Hello World!")
#+END_SRC

#+RESULTS:
:results:
Hello World!
:end:
*** graphql
#+BEGIN_SRC graphql :url https://countries.trevorblades.com/ :tangle no
  query GetContinents {
      continent(code: "AF") {
          name
	  code
      }
  }
#+END_SRC

#+RESULTS:
: {
:   "data": {
:     "continent": {
:       "name": "Africa",
:       "code": "AF"
:     }
:   }
: }

#+BEGIN_SRC elisp :tangle no
#+END_SRC
*** grapviz
   #+BEGIN_SRC dot :file (concat user-emacs-directory "OUTPUT/babel/graphviz.png") :exports both  :tangle no
     digraph {
         label="How to make sure 'input' is valid"

         start[shape="box", style=rounded];
         end[shape="box", style=rounded];
         if_valid[shape="diamond", style=""];
         message[shape="parallelogram", style=""]
         input[shape="parallelogram", style=""]

         start -> input;
         input -> if_valid;
         if_valid -> message[label="no"];
         if_valid -> end[label="yes"];
         message -> input;

         if_valid[label="Is input\nvalid?"]
         message[label="Show\nmessage"]
         input[label="Prompt\nfor input"]

         {rank=same; message input}
     }
   #+END_SRC

   #+RESULTS:
   [[file:~/.emacs.d/OUTPUT/babel/graphviz.png]]
*** haskell
#+BEGIN_SRC haskell :tangle no
  :{
  chain :: (Integral a) => a -> [a]
  chain 1 = [1]
  chain n
      | even n = n:chain (n `div` 2)
      | odd n  = n:chain (n*3 + 1)
  :}
  chain 10
#+END_SRC

#+RESULTS:
| 10 | 5 | 16 | 8 | 4 | 2 | 1 |
*** http
#+BEGIN_SRC http :pretty :tangle no
GET https://api.github.com/repos/zweifisch/ob-http/languages
Accept: application/vnd.github.moondragon+json
#+END_SRC

#+RESULTS:
: {
:   "Emacs Lisp": 15327,
:   "Shell": 139
: }

*** java
#+HEADERS: :classname HelloWorld
#+BEGIN_SRC java  :results output :exports both :tangle no
  public class HelloWorld {
      public static void main(String[] args) {
          System.out.println("Hello, World");
      }
  }
#+END_SRC

#+RESULTS:
: Hello, World
*** js
#+BEGIN_SRC js :results output :tangle no
message = 'Hello, World!';
let arr = [1, 2];
let [x, y] = arr;

console.log(message);
console.log(x);
console.log(y);
#+END_SRC

#+RESULTS:
: Hello, World!
: 1
: 2

*** kotlin
#+BEGIN_SRC kotlin :tangle no
fun fib(n: Int):Int {
    return when (n) {
           0,1 -> 1
           else -> fib(n - 1) + fib(n - 2)
    }
}

fib(19)
#+END_SRC

#+RESULTS:
: res0: kotlin.Int = 6765
: res1: kotlin.String = >>>

*** latex
#+BEGIN_SRC latex :tangle no
\LaTeX
#+END_SRC

#+RESULTS:
#+begin_export latex
\LaTeX
#+end_export
*** makefile
no results present only for tangling
,#+BEGIN_SRC makefile :tangle Makefile

#+BEGIN_SRC makefile :tangle no
hello:
  echo "hello world"
#+END_SRC
*** mermaid
   #+BEGIN_SRC mermaid :file (concat user-emacs-directory "OUTPUT/babel/plantuml.png") :tangle no
     sequenceDiagram
      A-->B: Works!
   #+END_SRC

   #+RESULTS:
   [[file:~/.emacs.d/OUTPUT/babel/plantuml.png]]

*** mongo
#+BEGIN_SRC mongo :tangle no
 db.inventory.find( {} )
#+END_SRC
*** plantuml
#+BEGIN_SRC plantuml :file (concat user-emacs-directory "OUTPUT/babel/plantuml.png") :tangle no
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice -> Bob: Another authentication Request
Alice <-- Bob: Another authentication Response
@enduml
#+END_SRC

#+RESULTS:
[[file:~/.emacs.d/OUTPUT/babel/plantuml.png]]
*** python
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
#+BEGIN_SRC python :results output :tangle no
  print('Hello world!')
#+END_SRC

#+RESULTS:
: Hello world!

*** redis
#+BEGIN_SRC redis db: 127.0.0.1:6379 :tangle no
SET myname "stardiviner"
GET myname
#+END_SRC

#+RESULTS:

*** restclient
#+BEGIN_SRC restclient :tangle no
  GET http://example.com
#+END_SRC

#+RESULTS:
#+begin_example html
,#+BEGIN_SRC html
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;

    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
    </style>
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

<!-- GET http://example.com -->
<!-- HTTP/1.1 200 OK -->
<!-- Accept-Ranges: bytes -->
<!-- Age: 453510 -->
<!-- Cache-Control: max-age=604800 -->
<!-- Content-Type: text/html; charset=UTF-8 -->
<!-- Date: Sat, 16 Oct 2021 21:01:17 GMT -->
<!-- Etag: "3147526947" -->
<!-- Expires: Sat, 23 Oct 2021 21:01:17 GMT -->
<!-- Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT -->
<!-- Server: ECS (dcb/7EA7) -->
<!-- Vary: Accept-Encoding -->
<!-- X-Cache: HIT -->
<!-- Content-Length: 648 -->
<!-- Request duration: 0.272552s -->
,#+END_SRC
#+end_example

*** rust
#+BEGIN_SRC rust :results output :tangle no
  fn main() {
      let greetings = ["Hello", "Hola", "Bonjour",
                       "Ciao", "こんにちは", "안녕하세요",
                       "Cześć", "Olá", "Здравствуйте",
                       "chào bạn", "您好"];

      for (num, greeting) in greetings.iter().enumerate() {
          print!("{} : ", greeting);
          match num {
              0 =>  println!("This code is editable and runnable!"),
              1 =>  println!("Este código es editable y ejecutable!"),
              2 =>  println!("Ce code est modifiable et exécutable!"),
              3 =>  println!("Questo codice è modificabile ed eseguibile!"),
              4 =>  println!("このコードは編集して実行出来ます！"),
              5 =>  println!("여기에서 코드를 수정하고 실행할 수 있습니다!"),
              6 =>  println!("Ten kod można edytować oraz uruchomić!"),
              7 =>  println!("Esse código é editável e executável!"),
              8 =>  println!("Этот код можно отредактировать и запустить!"),
              9 =>  println!("Bạn có thể edit và run code trực tiếp!"),
              10 =>  println!("这段代码是可以编辑并且能够运行的！"),
              _ =>  {},
          }
      }
  }
#+END_SRC

#+RESULTS:
#+begin_example
Hello : This code is editable and runnable!
Hola : Este código es editable y ejecutable!
Bonjour : Ce code est modifiable et exécutable!
Ciao : Questo codice è modificabile ed eseguibile!
こんにちは : このコードは編集して実行出来ます！
안녕하세요 : 여기에서 코드를 수정하고 실행할 수 있습니다!
Cześć : Ten kod można edytować oraz uruchomić!
Olá : Esse código é editável e executável!
Здравствуйте : Этот код можно отредактировать и запустить!
chào bạn : Bạn có thể edit và run code trực tiếp!
您好 : 这段代码是可以编辑并且能够运行的！
#+end_example
*** rustic
#+BEGIN_SRC rustic :results output :tangle no
fn main() {
    let greetings = ["Hello", "Hola", "Bonjour",
                     "Ciao", "こんにちは", "안녕하세요",
                     "Cześć", "Olá", "Здравствуйте",
                     "chào bạn", "您好"];

    for (num, greeting) in greetings.iter().enumerate() {
        print!("{} : ", greeting);
        match num {
            0 =>  println!("This code is editable and runnable!"),
            1 =>  println!("Este código es editable y ejecutable!"),
            2 =>  println!("Ce code est modifiable et exécutable!"),
            3 =>  println!("Questo codice è modificabile ed eseguibile!"),
            4 =>  println!("このコードは編集して実行出来ます！"),
            5 =>  println!("여기에서 코드를 수정하고 실행할 수 있습니다!"),
            6 =>  println!("Ten kod można edytować oraz uruchomić!"),
            7 =>  println!("Esse código é editável e executável!"),
            8 =>  println!("Этот код можно отредактировать и запустить!"),
            9 =>  println!("Bạn có thể edit và run code trực tiếp!"),
            10 =>  println!("这段代码是可以编辑并且能够运行的！"),
            _ =>  {},
        }
    }
}
#+END_SRC

#+RESULTS:
#+begin_example
Hello : This code is editable and runnable!
Hola : Este código es editable y ejecutable!
Bonjour : Ce code est modifiable et exécutable!
Ciao : Questo codice è modificabile ed eseguibile!
こんにちは : このコードは編集して実行出来ます！
안녕하세요 : 여기에서 코드를 수정하고 실행할 수 있습니다!
Cześć : Ten kod można edytować oraz uruchomić!
Olá : Esse código é editável e executável!
Здравствуйте : Этот код можно отредактировать и запустить!
chào bạn : Bạn có thể edit và run code trực tiếp!
您好 : 这段代码是可以编辑并且能够运行的！
#+end_example
*** sass
#+BEGIN_SRC scss :tangle no
$primary-color: #333;

body {
  color: $primary-color;
}
#+END_SRC

#+RESULTS:
: body {
:   color: #333;
: }
:
: /*# sourceMappingURL=sass-out-i7KbbA.map */

*** shell
#+BEGIN_SRC shell :results drawer :tangle no
 echo $0
#+END_SRC

#+RESULTS:
:results:
/run/current-system/sw/bin/zsh
:end:
*** sql
#+BEGIN_SRC sql :tangle no
 select * from test
#+END_SRC
*** sqlite
#+BEGIN_SRC sqlite :tangle no
 select * from test
#+END_SRC
*** swift
#+BEGIN_SRC swift :tangle no
print("Hello, World!")
#+END_SRC

#+RESULTS:
: zsh:1: command not found: swift
*** translate
#+BEGIN_SRC translate :src auto :dest de,fr,ar,ja :tangle no
This a test.
#+END_SRC

#+RESULTS:
| de | Dies ist ein Test. |
| fr | C'est un test.     |
| ar | هذا اختبار.       |
| ja | これはテストです。 |
*** typescript
#+BEGIN_SRC typescript :tangle no
let message: string = 'Hello, World!';
console.log(message);
#+END_SRC

#+RESULTS:
: Hello, World!
** wrapping
[[file:~/.emacs.d/global/misc.org::*wrap-region][wrap-region]]
#+BEGIN_SRC elisp
  (wrap-region-add-wrapper "#+BEGIN_SRC dart :results output\n"  "#+END_SRC\n"     "D" 'org-mode)
  (wrap-region-add-wrapper "#+BEGIN_EXAMPLE\n"                   "#+END_EXAMPLE\n" "E" 'org-mode)
  (wrap-region-add-wrapper "#+BEGIN_SRC go :results drawer\n"    "#+END_SRC\n"     "G" 'org-mode)
  (wrap-region-add-wrapper "#+BEGIN_SRC shell :results drawer\n" "#+END_SRC\n"     "S" 'org-mode)
#+END_SRC

** INFO
https://orgmode.org/worg/org-contrib/babel/languages/index.html
https://github.com/dfeich/org-babel-examples/tree/master
