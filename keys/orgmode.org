* orgmode-keybindings
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; orgmode-keybindings
  ;;;;
  ;;
#+end_src
** agenda
*** initial-state
#+begin_src elisp
  (evil-set-initial-state 'org-agenda-mode 'motion)
#+end_src
*** misc
#+begin_src elisp
  (general-define-key
   :keymaps 'org-agenda-mode-map
   ;; :states  'motion
   :states  '(normal visual motion)

   "C-S-j" 'org-agenda-todo-previousset
   "C-:"   'org-agenda-todo-nextset

   "C-M-j" 'org-agenda-date-earlier-minutes
   "C-j"   'org-agenda-date-earlier-hours
   "C-k"   'org-agenda-do-date-earlier
   "C-l"   'org-agenda-do-date-later
   "C-;"   'org-agenda-date-later-hours
   "C-M-;" 'org-agenda-date-later-minutes

   "M-k"   'org-agenda-drag-line-backward
   "M-l"   'org-agenda-drag-line-forward

   "C-M-K" 'org-agenda-priority-up
   "C-M-L" 'org-agenda-priority-down

   "gl"    'org-agenda-next-item
   "gk"    'org-agenda-previous-item

   "k"     'org-agenda-previous-line
   "l"     'org-agenda-next-line

   "a"     'org-agenda-append-agenda

   "cc"    'org-agenda-clock-cancel
   "cg"    'org-agenda-clock-goto
   "cr"    'org-agenda-clockreport-mode
   "ci"    'org-agenda-clock-in

   "co"    'org-agenda-clock-out
   "cI"    'org-agenda-show-clocking-issues

   "ct"    'org-agenda-set-tags

   "dd"    'org-agenda-kill
   "da"    'org-agenda-toggle-archive-tag

   "e"     'org-agenda-set-effort

   "fa"    'org-agenda-filter-remove-all
   "fc"    'org-agenda-filter-by-category
   "fh"    'org-agenda-filter-by-top-headline
   "fe"    'org-agenda-filter-by-effort
   "ft"    'org-agenda-filter-by-tag
   "fr"    'org-agenda-filter-by-regexp
   "fs"    'org-agenda-limit-interactively

   "gc"    'org-agenda-goto-calendar
   "gd"    'org-agenda-goto-date
   "gh"    'org-agenda-holidays
   "gm"    'org-agenda-phases-of-moon
   "gn"    'org-agenda-add-note
   "gr"    'org-agenda-redo-all
   "gs"    'org-agenda-sunrise-sunset
   "gt"    'org-agenda-show-tags

   "gC"    'org-agenda-convert-date
   "gD"    'org-agenda-view-mode-dispatch

   "gH"    'evil-window-top
   "gM"    'evil-window-middle
   "gL"    'evil-window-bottom

   "i"     'org-agenda-diary-entry

   "m"     'org-agenda-bulk-toggle
   "MT"    'org-agenda-bulk-toggle-all
   "MA"    'org-agenda-bulk-mark-all
   "MR"    'org-agenda-bulk-mark-regexp
   "MU"    'org-agenda-bulk-unmark-all
   "x"     'org-agenda-bulk-action

   "oc"    'org-agenda-capture
   "p"     'org-agenda-date-prompt

   "q"     'org-agenda-quit
   "Q"     'org-agenda-exit

   "r"     'org-agenda-redo
   "t"     'org-agenda-todo
   "u"     'org-agenda-undo

   "va"    'org-agenda-view-mode-dispatch
   "vr"    'org-agenda-reset-view
   "vd"    'org-agenda-day-view
   "vf"    'org-agenda-fortnight-view
   "vw"    'org-agenda-week-view
   "vm"    'org-agenda-month-view
   "vy"    'org-agenda-year-view

   "."     'org-agenda-goto-today

   "[["    'org-agenda-earlier
   "]]"    'org-agenda-later

   "+"     'org-agenda-manipulate-query-add
   "-"     'org-agenda-manipulate-query-subtract

   "A"     'org-agenda-archives-mode
   "F"     'org-agenda-follow-mode
   "G"     'org-agenda-clock-goto
   ;; "H"     '
   ;; "J"     '
   "D"     'org-agenda-toggle-diary
   "I"     'org-agenda-clock-in
   "L"     'org-agenda-log-mode
   "O"     'org-agenda-clock-out
   "P"     'org-agenda-show-the-flagging-note
   "R"     'org-agenda-clockreport-mode
   "T"     'org-timer-set-timer
   "Z"     'org-agenda-dim-blocked-tasks

   "TAB"        'org-agenda-goto
   "RET"        'org-agenda-switch-to
   "<backtab>"  'org-agenda-show
   "<S-return>" 'org-agenda-show
   )
#+end_src
** avy in orgmode
~:prefix~ not working
#+begin_src elisp
  (general-define-key
   :keymaps 'org-mode-map
   "C-'" 'nil
   )
#+end_src
** outline
#+begin_src elisp
  (general-define-key
   :keymaps 'org-mode-map
  "M-<return>"   'fb/org-meta-return
  "M-S-<return>" 'org-insert-todo-subheading
   )
#+end_src
** minibuffer date
https://orgmode.org/manual/The-date_002ftime-prompt.html
#+begin_src elisp
  (general-define-key
   :keymaps 'org-read-date-minibuffer-local-map

   ;; "C-H"    'exit-minibuffer
   "C-j"    'nil

   "C-j"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day              1)))
   "C-k"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week             1)))
   "C-l"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week              1)))
   "C-;"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day               1)))

   ;; SHIFT or META is the same
   "C-S-j"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month            1)))
   "C-S-k"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year             1)))
   "C-S-l"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year              1)))
   "C-:"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month             1)))
   "C-M-j"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month            1)))
   "C-M-k"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year             1)))
   "C-M-l"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year              1)))
   "C-M-;"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month             1)))

   ;; scrolling with CTRL + SHIFT + META
   "C-M-S-j" '(lambda () (interactive) (org-eval-in-calendar '(calendar-scroll-right              1)))
   "C-M-S-k" '(lambda () (interactive) (org-eval-in-calendar '(calendar-scroll-right-three-months 1)))
   "C-M-S-l" '(lambda () (interactive) (org-eval-in-calendar '(calendar-scroll-left-three-months  1)))
   "C-M-:"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-scroll-left               1)))
   )
#+end_src
** navigation
#+begin_src elisp
  (general-define-key
   :keymaps '(org-mode-map)
   :states  '(normal visual)
   "gj"     'outline-up-heading
   "gl"     'org-forward-heading-same-level
   )
#+end_src
** structureMoving
*** control-meta-shift-jkl;
#+begin_src elisp
  (general-define-key
   :keymaps  'org-mode-map
   "C-M-S-j" 'org-shiftleft
   "C-M-S-k" 'org-shiftup
   "C-M-S-l" 'org-shiftdown
   "C-M-:"   'org-shiftright
   )
#+end_src
*** control-shift-jkl;
 #+begin_src elisp
   (general-define-key
    :keymaps 'org-mode-map
    :states  '(normal motion)
    "C-J"    'org-shiftcontrolleft
    "C-K"    'org-shiftcontrolup
    "C-L"    'org-shiftcontroldown
    "C-:"    'org-shiftcontrolright
    )
#+end_src
***  control-meta-jkl; (subtree)
 #+begin_src elisp
  (general-define-key
   :keymaps 'org-mode-map
   "C-M-j"  'org-shiftmetaleft
   "C-M-k"  'org-metaup
   "C-M-l"  'org-metadown
   "C-M-;"  'org-shiftmetaright
   )
#+end_src
*** meta-jkl; (heading)
#+begin_src elisp
  (general-define-key
   :keymaps 'org-mode-map
   "M-j"    'org-metaleft
   "M-k"    'org-shiftmetaup
   "M-l"    'org-shiftmetadown
   "M-;"    'org-metaright
   )
  (defun fb*org-mode-meta-bindings ()
    (general-define-key
     :keymaps 'outline-mode-map
     :states  'normal
     "M-j"    'nil
     "M-k"    'nil
     "M-l"    'nil
     "M-;"    'nil
     ))
#+end_src
*** hook-function
#+begin_src elisp
    (defun fb*org-mode-keybindings-h ()
      (fb*org-mode-meta-bindings)
    )
#+end_src
*** hook
#+begin_src elisp
  (add-hook 'org-mode-hook 'fb*org-mode-keybindings-h)
#+end_src
** TODO tables
** local-leader
#+begin_src elisp
  (fb/local-leader-key
    :keymaps 'org-mode-map
    :states  '(normal visual insert)

    "a"      '(org-agenda                                         :which-key "agenda"           )

    "b"      '(                                                   :which-key "table"            :ignore t)
    "bh"     '(org-table-hline-and-move                           :which-key "headline"         )

    "c"      '(org-comment-dwim                                   :which-key "comment"          )

    "C"      '(                                                   :which-key "clock"            :ignore t)
    "CC"     '(org-clock-cancel                                   :which-key "cancel"           )
    "CG"     '(org-clock-goto                                     :which-key "goto"             )
    "CI"     '(org-clock-in                                       :which-key "in"               )
    "CL"     '(org-clock-in-last                                  :which-key "last"             )
    "CO"     '(org-clock-out                                      :which-key "out"              )

    "d"      '(                                                   :which-key "id-dependecy"     :ignore t)
    "d"      '(                                                   :which-key "id"               :ignore t)
    "dic"    '(org-id-copy                                        :which-key "id-copy"          )
    "dif"    '(org-find-entry-with-id                             :which-key "id-find-entry"    )
    "dig"    '(org-id-goto                                        :which-key "id-goto"          )
    "dic"    '(org-id-get-create                                  :which-key "id-create"        )
    "dil"    '(org-id-store-link                                  :which-key "id-store-link"    )

    "dp"     '(                                                   :which-key "predecessor"      :ignore t)
    "dpg"    '(fb/goto-predecessor                                :which-key "pre-goto"         )
    "dpi"    '(fb/insert-predecessor-relation                     :which-key "pre-insert"       )
    "dpr"    '(fb/remove-predecessor-relation                     :which-key "pre-remove"       )
    "dps"    '(fb/store-as-predecessor                            :which-key "pre-store"        )
    "ds"     '(                                                   :which-key "successor"        :ignore t)
    "dsg"    '(fb/goto-successor                                  :which-key "suc-goto"         )
    "dsi"    '(fb/insert-successor-relation                       :which-key "suc-insert"       )
    "dsr"    '(fb/remove-successor-relation                       :which-key "suc-remove"       )
    "dss"    '(fb/store-as-successor                              :which-key "suc-store"        )

    "il"     '(org-insert-last-stored-link                        :which-key "insert last link" )
    "l"      '(org-insert-link                                    :which-key "insert link"      )

    "n"      '(org-add-note                                       :which-key "node"             )

    "o"      '(org-open-at-point                                  :which-key "C-c C-o"          )
    "O"      '(                                                   :which-key "toggle"           :ignore t)
    "OI"     '(org-toggle-inline-images                           :which-key "images"           )

    "p"      '(org-set-property                                   :which-key "property"         )
    "S"      '(org-insert-structure-template 'elisp               :which-key "struc-temp"       )

    "s"      '(                                                   :which-key "subtree"          :ignore t)
    "sn"     '(org-narrow-to-subtree                              :which-key "narrow"           )
    "so"     '(org-sort                                           :which-key "sort"             )
    "sw"     '(widen                                              :which-key "widen"            )

    "r"      '(fb/org-refile-hydra-grouped/body                   :which-key "refile"           )

    "t"      '(                                                   :which-key "todo"             :ignore t)
    "tc"     '(org-todo                                           :which-key "cycle"            )
    "t SPC"  '(org-todo                                           :which-key "cycle"            )
    "tt"     '((lambda () (interactive)(org-todo 'todo))          :which-key "todo"             )
    "td"     '((lambda () (interactive)(org-todo 'done))          :which-key "done"             )
    "tx"     '((lambda () (interactive)(org-todo 'none))          :which-key "none"             )

    "T"      '(                                                   :which-key "time"             :ignore t)
    "TC"     '(                                                   :which-key "check"            :ignore t)
    "TCA"    '(org-check-after-date                               :which-key "check-after"      )
    "TCB"    '(org-check-before-date                              :which-key "check-before"     )
    "TCC"    '(org-goto-calendar                                  :which-key "calendar"         )
    "TCD"    '(org-check-deadlines                                :which-key "check-deadline"   )
    "TD"     '(org-time-stamp                                     :which-key "date"             )
    "TE"     '(org-evaluate-time-range                            :which-key "evaluate"         )
    "TF"     '(org-date-from-calendar                             :which-key "date from cal"    )
    "TV"     '((lambda()(interactive)(org-evaluate-time-range 0)) :which-key "evaluate+ins"     )
    "TI"     '(org-time-stamp-inactive                            :which-key "inact"            )
    "TO"     '((lambda()(interactive)(org-time-stamp-inactive 0)) :which-key "inact+time"       )
    "TL"     '(org-deadline                                       :which-key "deadline"         )
    "TS"     '(org-schedule                                       :which-key "schedule"         )
    "TT"     '((lambda()(interactive)(org-time-stamp 0))          :which-key "date+time"        )

    "x"      '(                                                   :which-key "text"             :ignore t)
    "xb"     '((lambda () (interactive)(org-emphasize ?\*))       :which-key "bold"             )
    "xc"     '((lambda () (interactive)(org-emphasize ?\~))       :which-key "code"             )
    "xi"     '((lambda () (interactive)(org-emphasize ?\/))       :which-key "italic"           )
    "xr"     '((lambda () (interactive)(org-emphasize ?\ ))       :which-key "clear"            )
    "xR"     '((lambda () (interactive)(org-emphasize ?\s))       :which-key "clear"            )
    "xs"     '((lambda () (interactive)(org-emphasize ?\+))       :which-key "strike-through"   )
    "xu"     '((lambda () (interactive)(org-emphasize ?\_))       :which-key "underline"        )
    "xv"     '((lambda () (interactive)(org-emphasize ?\=))       :which-key "verbatim"         )
    )
#+end_src
*** TODO clock
#+begin_example elisp
"CO"     '(                                                   :which-key "out"              )
org-clock-display
org-clock-mark-default-task
org-clock-menu
org-clock-modify-effort-estimate
org-clock-remove-overlays
org-clock-report
org-clock-timestamps-down
org-clock-timestamps-up
org-clock-toggle-auto-clockout
org-clock-update-time-maybe
org-resolve-clocks
#+end_example
*** TODO org-emphasize
:LOGBOOK:
- State "TODO"       from              [2021-02-23 Tue 13:36]
:END:
**** cf. spacemacs
#+begin_example shell
rg org-emphasize ~/SRC/GITHUB/spacemacs
#+end_example
**** TODO =xr= clearing not working - inserts " " arround region
*** TODO org-table
