* orgmode-keybindings
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; orgmode-keybindings
  ;;;;
  ;;
#+end_src
** agenda
*** navigation
#+begin_src elisp
  (general-define-key
   :keymaps 'org-agenda-mode-map
   "p" 'org-agenda-capture
   "n" 'org-agenda-log-mode
   "k" 'org-agenda-previous-line
   "l" 'org-agenda-next-line
   )
#+end_src
** avy in orgmode
~:prefix~ not working
#+begin_src elisp
  (general-define-key
   :keymaps 'org-mode-map
   "C-'" 'nil
   )
#+end_src
** outline
#+begin_src elisp
  (general-define-key
   :keymaps 'org-mode-map
  "M-<return>"   'fb/org-meta-return
  "M-S-<return>" 'org-insert-todo-subheading
   )
#+end_src
** minibuffer date
https://orgmode.org/manual/The-date_002ftime-prompt.html
#+begin_src elisp
  (general-define-key
   :keymaps 'org-read-date-minibuffer-local-map

   ;; "C-H"    'exit-minibuffer
   "C-j"    'nil

   "C-j"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day              1)))
   "C-k"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week             1)))
   "C-l"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week              1)))
   "C-;"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day               1)))

   ;; SHIFT or META is the same
   "C-S-j"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month            1)))
   "C-S-k"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year             1)))
   "C-S-l"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year              1)))
   "C-:"     '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month             1)))
   "C-M-j"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month            1)))
   "C-M-k"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year             1)))
   "C-M-l"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year              1)))
   "C-M-;"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month             1)))

   ;; scrolling with CTRL + SHIFT + META
   "C-M-S-j" '(lambda () (interactive) (org-eval-in-calendar '(calendar-scroll-right              1)))
   "C-M-S-k" '(lambda () (interactive) (org-eval-in-calendar '(calendar-scroll-right-three-months 1)))
   "C-M-S-l" '(lambda () (interactive) (org-eval-in-calendar '(calendar-scroll-left-three-months  1)))
   "C-M-:"   '(lambda () (interactive) (org-eval-in-calendar '(calendar-scroll-left               1)))
   )
#+end_src
** navigation
#+begin_src elisp
  (general-define-key
   :keymaps '(org-mode-map)
   :states  '(normal)
   "gj"     'outline-up-heading
   "gl"     'org-forward-heading-same-level
   )
#+end_src
** structureMoving
*** control-meta-shift-jkl;
#+begin_src elisp
  (general-define-key
   :keymaps  'org-mode-map
   "C-M-S-j" 'org-shiftleft
   "C-M-S-k" 'org-shiftup
   "C-M-S-l" 'org-shiftdown
   "C-M-:"   'org-shiftright
   )
#+end_src
*** control-shift-jkl;
 #+begin_src elisp
   (general-define-key
    :keymaps 'org-mode-map
    :states  '(normal motion)
    "C-J"    'org-shiftcontrolleft
    "C-K"    'org-shiftcontrolup
    "C-L"    'org-shiftcontroldown
    "C-:"    'org-shiftcontrolright
    )
#+end_src
***  control-meta-jkl; (subtree)
 #+begin_src elisp
  (general-define-key
   :keymaps 'org-mode-map
   "C-M-j"  'org-shiftmetaleft
   "C-M-k"  'org-metaup
   "C-M-l"  'org-metadown
   "C-M-;"  'org-shiftmetaright
   )
#+end_src
*** meta-jkl; (heading)
#+begin_src elisp
  (general-define-key
   :keymaps 'org-mode-map
   "M-j"    'org-metaleft
   "M-k"    'org-shiftmetaup
   "M-l"    'org-shiftmetadown
   "M-;"    'org-metaright
   )
  (defun fb*org-mode-meta-bindings ()
    (general-define-key
     :keymaps 'outline-mode-map
     :states  'normal
     "M-j"    'nil
     "M-k"    'nil
     "M-l"    'nil
     "M-;"    'nil
     ))
#+end_src
*** hook-function
#+begin_src elisp
    (defun fb*org-mode-keybindings-h ()
      (fb*org-mode-meta-bindings)
    )
#+end_src
*** hook
#+begin_src elisp
  (add-hook 'org-mode-hook 'fb*org-mode-keybindings-h)
#+end_src
** local-leader
#+begin_src elisp
    (fb/local-leader-key
      :keymaps 'org-mode-map
      :states  '(normal visual insert)

      "a"     '(org-agenda                                          :which-key "agenda"           )

      "c"      '(org-comment-dwim                                   :which-key "comment"          )

      "l"      '(org-insert-last-stored-link                        :which-key "insert link"      )

      "o"      '(org-open-at-point                                  :which-key "C-c C-o"          )

      "S"      '(org-insert-structure-template 'elisp               :which-key "struc-temp"       )

      "s"      '(                                                   :which-key "subtree"          :ignore t)
      "sn"     '(org-narrow-to-subtree                              :which-key "narrow"           )
      "so"     '(org-sort                                           :which-key "sort"             )
      "sw"     '(widen                                              :which-key "widen"            )

      "r"      '(fb/org-refile-hydra-grouped/body                   :which-key "refile"           )

      "t"      '(                                                   :which-key "todo"             :ignore t)
      "tc"     '(org-todo                                           :which-key "cycle"            )
      "t SPC"  '(org-todo                                           :which-key "cycle"            )
      "tt"     '((lambda () (interactive)(org-todo 'todo))          :which-key "todo"             )
      "td"     '((lambda () (interactive)(org-todo 'done))          :which-key "done"             )
      "tx"     '((lambda () (interactive)(org-todo 'none))          :which-key "none"             )

      "T"      '(                                                   :which-key "time"             :ignore t)
      "TC"     '(                                                   :which-key "check"            :ignore t)
      "TCA"    '(org-check-after-date                               :which-key "check-after"      )
      "TCB"    '(org-check-before-date                              :which-key "check-before"     )
      "TCC"    '(org-goto-calendar                                  :which-key "calendar"         )
      "TCD"    '(org-check-deadlines                                :which-key "check-deadline"   )
      "TD"     '(org-date-from-calendar                             :which-key "date"             )
      "TE"     '(org-evaluate-time-range                            :which-key "evaluate"         )
      "TV"     '((lambda()(interactive)(org-evaluate-time-range 0)) :which-key "evaluate+ins"     )
      "TI"     '(org-time-stamp-inactive                            :which-key "inact"            )
      "TO"     '((lambda()(interactive)(org-time-stamp-inactive 0)) :which-key "inact+time"       )
      "TL"     '(org-deadline                                       :which-key "deadline"         )
      "TS"     '(org-schedule                                       :which-key "schedule"         )
      "TR"     '(org-time-stamp                                     :which-key "date"             )
      "TT"     '((lambda()(interactive)(org-time-stamp 0))          :which-key "date+time"        )

      "x"      '(                                                   :which-key "text"             :ignore t)
      "xb"     '((lambda () (interactive)(org-emphasize ?\*))       :which-key "bold"             )
      "xc"     '((lambda () (interactive)(org-emphasize ?\~))       :which-key "code"             )
      "xi"     '((lambda () (interactive)(org-emphasize ?\/))       :which-key "italic"           )
      "xr"     '((lambda () (interactive)(org-emphasize ?\ ))       :which-key "clear"            )
      "xR"     '((lambda () (interactive)(org-emphasize ?\s))       :which-key "clear"            )
      "xs"     '((lambda () (interactive)(org-emphasize ?\+))       :which-key "strike-through"   )
      "xu"     '((lambda () (interactive)(org-emphasize ?\_))       :which-key "underline"        )
      "xv"     '((lambda () (interactive)(org-emphasize ?\=))       :which-key "verbatim"         )
      )
#+end_src
*** org-emphasize
**** cf. spacemacs
#+begin_example shell
rg org-emphasize ~/SRC/GITHUB/spacemacs
#+end_example
**** TODO =xr= clearing not working - inserts " " arround region
