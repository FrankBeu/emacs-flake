#+STARTUP: content
* keys-keybindings
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; keys-keybindings
  ;;;;
  ;;
#+end_src
** INFO
*** general
**** examples
https://github.com/noctuid/general.el#general-examples
*** unbind key
=M-x= ~global-unset-key~
*** prefix will stack
if a keymap is bound to a global-leader-key
do not define a prefix in this keymap
** general-relations
*** ~evil-global-set-key~   ---   ~general-def~
#+begin_example elisp
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
#+end_example
#+begin_example elisp
  (general-def 'motion
    "k" 'evil-previous-visual-line
    )
#+end_example
*** ~define-key~   ---   ~general-define-key~
#+begin_example elisp
  (define-key evil-normal-state-map (kbd "h") 'evil-repeat-find-char)
#+end_example
#+begin_example elisp
  (general-define-key
   :keymaps '(evil-normal-state-map)
   ;; :states  '(normal visual)
   "h"   'evil-repeat-find-char
   )
#+end_example
*** ~evil-define-key 'motion~   ---   ~general-define-key :states 'motion~
#+begin_example elisp
  (evil-define-key 'motion undo-tree-visualizer-mode-map (kbd "k") 'undo-tree-visualize-undo)
  (evil-define-key 'motion undo-tree-visualizer-mode-map (kbd "l") 'undo-tree-visualize-redo)
#+end_example
#+begin_example elisp
  (general-define-key
     :keymaps '(undo-tree-visualizer-mode-map)
     :states  'motion
     "k" 'undo-tree-visualize-undo
     "l" 'undo-tree-visualize-redo
     )
#+end_example
** evil
*** jkl;
**** ; -> h
#+begin_src elisp
  (general-define-key
   :keymaps '(evil-normal-state-map)
   ;; :states  '(normal visual)
   "h"   'evil-repeat-find-char
   )
#+end_src
**** jkl;
#+begin_src elisp
  (general-define-key
   :keymaps '(evil-motion-state-map)
   ;; :states  '(normal visual)
   "j" 'evil-backward-char
   "k" 'evil-previous-visual-line
   "l" 'evil-next-visual-line
   ";" 'evil-forward-char
   )
#+end_src
***** also in visual mode
#+begin_src elisp
  (general-define-key
   :keymaps '(evil-visual-state-map)
   "k" 'evil-previous-visual-line
   "l" 'evil-next-visual-line
   )
#+end_src
***** Use visual line motions even outside of visual-line-mode buffers
#+begin_src elisp
  (general-def 'motion
    "k" 'evil-previous-visual-line
    "l" 'evil-next-visual-line
    )
#+end_src
*** set initial-state for modes
#+begin_src elisp
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
#+end_src
** ESC
on prompts use:
=ESC= like =C-g=
#+begin_src elisp
  (general-define-key
   "<escape>" 'keyboard-escape-quit
   )
#+end_src
** avy
#+begin_src elisp
  (general-define-key
   "C-'"  'avy-goto-word-0
   "C-\"" 'avy-goto-line
   )
#+end_src
** company
*** company-mode-map
#+begin_src elisp
    (general-define-key
     :keymaps '(
                company-mode-map
                )
     "C-j" 'nil
     "C-j" 'company-indent-or-complete-common
     "C-k" 'nil
     "C-k" 'company-select-previous
     "C-l" 'nil
     "C-l" 'company-select-next
     "C-;" 'nil
     "C-;" 'company-complete
     )
#+end_src
*** company-active
#+begin_src elisp
    (general-define-key
     :keymaps '(
                company-active-map
                ;; company-search-map
                )
     ;; "C-j" 'nil
     ;; "C-j" 'company-complete-selection
     "C-k" 'nil
     "C-k" 'company-select-previous
     "C-l" 'nil
     "C-l" 'company-select-next
     "C-;" 'nil
     "C-;" 'company-complete
     )
#+end_src
*** FUNDUS
  #+begin_src elisp :tangle no
  ;; (define-key company-search-map (kbd "C-t") 'company-search-toggle-filtering)
  #+end_src
** counsel
#+begin_src elisp
  (general-define-key
   :keymaps '(minibuffer-local-map)
   ;; :states  '(normal visual)
   "C-r"    'counsel-minibuffer-history
   )
#+end_src
** dired
#+begin_src elisp
  (general-define-key
   :keymaps '(dired-mode-map)
   :states  '(normal visual)
   ;; "j" 'nil
   ";"      'nil
   )

  (general-define-key
   :keymaps '(dired-mode-map)
   :states  '(normal visual)
   ;; "j" 'nil
   "H"      'dired-hide-dotfiles-mode
   ";"      'dired-find-file
   "j"      'dired-single-up-directory
   "r"      'dired-rifle
   )

  (general-define-key
   :keymaps '(dired-mode-map)
   :states  '(normal visual)
   :prefix  "g"
   "R"      'dired-do-redisplay
   )

  (general-define-key
   :keymaps '(dired-mode-map)
   :states  '(normal visual)
   :prefix  "h"
   "d"      'epa-dired-do-decrypt
   "e"      'epa-dired-do-encrypt
   "s"      'epa-dired-do-sign
   "v"      'epa-dired-do-verify
   )
#+end_src
** imenu
#+begin_src elisp
  (general-define-key
   :keymaps '(imenu-list-major-mode-map)
   "<C-return>" 'imenu-list-display-entry
   "M-RET"      'imenu-list-display-entry
   )
#+end_src
** ivy
#+begin_src elisp
  (general-define-key
   :keymaps '(counsel-ag-map
              counsel-git-grep-map
              counsel-grep-map
              counsel-imenu-map
              )
   "C-l" 'nil
   "C-l" 'ivy-next-line
   "C-S-l" 'ivy-call-and-recenter
   )

  (general-define-key
   :keymaps '(ivy-minibuffer-map)
   "C-k" 'ivy-previous-line
   "C-l" 'ivy-next-line
   "C-;" 'ivy-alt-done
   "TAB" 'ivy-alt-done
   )

  (general-define-key
   :keymaps '(ivy-switch-buffer-map)
   "C-k" 'ivy-previous-line
   "C-;" 'ivy-done
   "C-d" 'ivy-switch-buffer-kill
   )

  (general-define-key
   :keymaps '(ivy-reverse-i-search-map)
   "C-k" 'ivy-previous-line
   "C-d" 'ivy-reverse-i-search-kill
   )
#+end_src
** lsp
*** lsp-command-map
#+begin_src elisp
  (general-define-key
   :keymaps '(lsp-command-map)
   ;; "i"  '(:ignore t :which-key "ivy/imenu") ;;; defined in fb/leader-key
   "ii"  'lsp-ivy-workspace-symbol
   "im"  'lsp-ui-imenu
   ;; "t"  '(:ignore t  :which-key "treemacs") ;;; defined in fb/leader-key
   "ts" 'lsp-treemacs-symbols
   )
#+end_src
*** doc-frame-focus
**** focus
#+begin_src elisp
  (general-define-key
   :keymaps '(
             lsp-mode-map
             )
   "C-:" 'lsp-ui-doc-focus-frame
    )
#+end_src
**** unfocus
#+begin_src elisp
  (general-define-key
   :keymaps '(
             lsp-ui-doc-frame-mode-map
              )
   "C-J" 'lsp-ui-doc-unfocus-frame
    )
#+end_src
** magit
#+begin_src elisp
  (general-define-key
   :keymaps '(magit-mode-map)
   :states  '(normal visual)
   "j" 'nil
   )

  (general-define-key
   :keymaps '(magit-status-mode-map)
   "j" 'nil
   )

  (general-define-key
   :keymaps '(magit-status-mode-map)
   :states  '(normal visual)
   "h" 'magit-log
   )

  (general-define-key
   :keymaps 'magit-mode-map
   "h" 'magit-log
   "H" 'magit-log
   "j" 'evil-backward-char
   ;; "k" 'evil-previous-visual-line
   "l" 'evil-next-visual-line
   ;; ";" 'evil-forward-char
   "J" 'magit-status-jump
   )
#+end_src
** orgmode-global
#+begin_src elisp
  (general-define-key
   :prefix "C-c"
   "L" 'org-store-link
   ;; "l" 'org-store-link
   "a" 'org-agenda
   "c" 'org-capture
   )
#+end_src
** swiper
#+begin_src elisp
  (general-define-key
   "C-s" 'swiper
   )
#+end_src
#+begin_src elisp
  (general-define-key
   :keymaps '(swiper-map)
   "C-l"   'nil
   )
  (general-define-key
   :keymaps '(swiper-map)
   "C-l"   'ivy-next-line
   "C-S-L" 'swiper-recenter-top-bottom
   )
#+end_src
** treemacs
#+begin_src elisp
  (eval-after-load "treemacs-evil"
    '(progn
       (general-define-key
        :keymaps '(evil-treemacs-state-map treemacs-mode-map)
        "h" 'evil-forward-char
        "j" 'treemacs-root-up
        "k" 'treemacs-previous-line
        "l" 'treemacs-next-line
        ";" 'treemacs-root-down
        )

       (general-define-key
        :keymaps 'treemacs-mode-map
        :states 'treemacs
        "l" 'nil
        )

       (general-define-key
        :keymaps 'treemacs-mode-map
        :states 'treemacs
        "h" 'evil-forward-char
        "j" 'treemacs-root-up
        "k" 'treemacs-previous-line
        "l" 'treemacs-next-line
        ";" 'treemacs-root-down
        )))
#+end_src
** undo-tree
#+begin_src elisp
    (general-define-key
     :keymaps '(undo-tree-visualizer-mode-map)
     :states  'motion
     ;; "j" 'undo-tree-visualize-switch-branch-left        ;;; working
     "k" 'undo-tree-visualize-undo
     "l" 'undo-tree-visualize-redo
     ;; ";" 'undo-tree-visualize-switch-branch-right       ;;; working
     )
#+end_src
** which-key
#+begin_src elisp :tangle no
    (general-define-key
     :keymaps '(which-key-C-h-map)
     ;; :states  'motion
     ;; "j" 'undo-tree-visualize-switch-branch-left        ;;; working
     "C-M-:" 'which-key-show-next-page-cycle
     "C-M-J" 'which-key-show-previous-page-cycle
     "C-M-H" 'which-key-show-standard-help
     "C-M-D" 'which-key-toggle-docstrings
     "C-M-G" 'which-key-abort
     "C-M-U" 'which-key-undo-key
     )
#+end_src
** writeroom
#+begin_src elisp
  (general-define-key
   :keymaps '(writeroom-mode-map)
   "s-?"  'nil
   "M-m"   '(writeroom-toggle-mode-line :which-key "toggle-modeline")
   "C-M-<" 'writeroom-decrease-width
   "C-M->" 'writeroom-increase-width
   ;; "C-M-=" 'writeroom-adjust-width
   "C-M-=" '(writeroom-adjust-width :which-key "wr-with-=")
   )
#+end_src
*** TODO which-key not working
** global-leader =SPC=
#+begin_src elisp
  (fb/leader-key

    "a"   '(                                                           :which-key "ace"                              :ignore t)
    "aa"  '(aw-show-dispatch-help                                      :which-key "ace-window"                       )
    "ab"  '(balance-windows                                            :which-key "balance"                          )
    "ad"  '(ace-delete-window                                          :which-key "ace-delete"                       )
    "ae"  '(:keymap evil-window-map :package evil                      :which-key "evil-window"                      )

    "af"  '(aw-flip-window                                             :which-key "flip"                             )
    "ag"  '(hydra-window-frame/body                                    :which-key "frame"                            )
    "ah"  '(fb/aw-split-window-horz                                    :which-key "split |"                          )
    "ai"  '(winner-mode                                                :which-key "winner-mode"                      )
    "am"  '(delete-other-windows                                       :which-key "maximize"                         )
    "ao"  '(hydra-window-scroll/body                                   :which-key "scroll"                           )
    "ap"  '(ace-swap-window                                            :which-key "ace-swap"                         )
    "ar"  '(fb/winner-redo                                             :which-key "winner-redo"                      )
    "as"  '(ace-select-window                                          :which-key "ace-select"                       )
    "au"  '(fb/winner-undo                                             :which-key "winner-undo"                      )
    "av"  '(fb/aw-split-window-vert                                    :which-key "split -"                          )
    "aw"  '(hydra-window-size/body                                     :which-key "resize"                           )
    "ax"  '(ace-delete-other-windows                                   :which-key "ace-delete-other"                 )

    "c"   '(                                                           :which-key "comment"                          :ignore t)
    "cc"  '(evilnc-comment-operator                                    :which-key "cmnt-operator"                    )
    "ci"  '(evilnc-toggle-invert-comment-line-by-line                  :which-key "toggle-invert-cmnt-line-by-line"  )
    "cl"  '(evilnc-comment-or-uncomment-lines                          :which-key "cmmnt-or-uncmnt-lines"            )
    "cp"  '(evilnc-comment-or-uncomment-paragraphs                     :which-key "cmmnt-or-uncmnt-paragraphs"       )
    "cr"  '(comment-or-uncomment-region                                :which-key "cmmnt-or-uncmnt-region"           )
    "ct"  '(evilnc-quick-comment-or-uncomment-to-the-line              :which-key "quick-cmmnt-or-uncmnt-to-the-line")
    "cy"  '(evilnc-copy-and-comment-lines                              :which-key "cp-and-cmnt-lines"                )

    "C"   '(                                                           :which-key "command-log-mode"                 :ignore t)
    "CC"  '(command-log-mode                                           :which-key "toggle-local"                     )
    "CB"  '(clm/open-command-log-buffer                                :which-key "show-clm-buffer"                  )
    "CG"  '(global-command-log-mode                                    :which-key "toggle-global"                    )

    "d"   '(                                                           :which-key "delete"                           :ignore t)
    "dw"  '(delete-trailing-whitespace                                 :which-key "trailing-wsp"                     )

    "e"   '(                                                           :which-key "error"                            :ignore t)
    "e?"  '(flycheck-describe-checker                                  :which-key "describe-checker"                 )
    "eH"  '(display-local-help                                         :which-key "local-help"                       )
    "eL"  '(spacemacs/goto-flycheck-error-list                         :which-key "goto-list"                        )
    "eM"  '(flycheck-compile                                           :which-key "compile"                          )
    "eS"  '(flycheck-set-checker-executable                            :which-key "set-checker-executable"           )
    "eV"  '(flycheck-version                                           :which-key "version"                          )
    "eb"  '(flycheck-buffer                                            :which-key "buffer"                           )
    "ec"  '(flycheck-clear                                             :which-key "clear"                            )
    "ee"  '(flycheck-explain-error-at-point                            :which-key "explain-at-point"                 )
    "ei"  '(flycheck-manual                                            :which-key "manual"                           )
    "el"  '(fb/toggle-flycheck-error-buffer                            :which-key "toggle-list"                      )
    "en"  '(flycheck-next-error                                        :which-key "next"                             )
    "ep"  '(flycheck-previous-error                                    :which-key "previous"                         )
    "es"  '(flycheck-select-checker                                    :which-key "select-checker"                   )
    "ev"  '(flycheck-verify-setup                                      :which-key "verify-setup"                     )
    "ex"  '(flycheck-disable-checker                                   :which-key "disable"                          )
    "ey"  '(flycheck-copy-errors-as-kill                               :which-key "copy-errors"                      )

    "f"   '(                                                           :which-key "fast/file"                        :ignore t)
    "fy"  '(fb/yank-buffer-filename                                    :which-key "yank-name"                        )
    "ff"  '(counsel-find-file                                          :which-key "find"                             )
    "fs"  '(save-buffer                                                :which-key "save-buffer"                      )
    "fS"  '(save-some-buffers                                          :which-key "save-some-buffer"                 )

    "g"   '(                                                           :which-key "git"                              :ignore t)
    "gs"  '(magit-status                                               :which-key "status"                           )

    "i"   '(                                                           :which-key "imenu"                            :ignore t)
    "ii"  '(imenu-list                                                 :which-key "imenulist"                        )

    "j"   '(dired-jump                                                 :which-key "dired"                            )

    "L"   '(                                                           :which-key "lsp"                              :ignore t)
    "LD"  '(xref-find-definitions                                      :which-key "find-def"                         )
    "LR"  '(xref-find-references                                       :which-key "find-ref"                         )
    "LN"  '(lsp-ui-find-next-reference                                 :which-key "next-ref"                         )
    "LP"  '(lsp-ui-find-prev-reference                                 :which-key "prev-ref"                         )
    "LS"  '(counsel-imenu                                              :which-key "counsel0imenu"                    )
    "LE"  '(lsp-ui-flycheck-list                                       :which-key "list"                             )
    "LS"  '(lsp-ui-sideline-mode                                       :which-key "sideline"                         )
    "LX"  '(lsp-execute-code-action                                    :which-key "action"                           )
    "LL"  '(lsp                                                        :which-key "start-lsp"                        )

    "l"   '(:keymap lsp-command-map :package lsp-mode                  :which-key "lsp"                              )
    "li"  '(                                                           :which-key "ivy/imenu"                        :ignore t)
    "lt"  '(                                                           :which-key "treemacs"                         :ignore t)
    "l="  '(                                                           :which-key "formatting"                       :ignore t)
    "la"  '(                                                           :which-key "code actions"                     :ignore t)
    "lF"  '(                                                           :which-key "folders"                          :ignore t)
    "lG"  '(                                                           :which-key "peek"                             :ignore t)
    "lg"  '(                                                           :which-key "goto"                             :ignore t)
    "lh"  '(                                                           :which-key "help"                             :ignore t)
    "lr"  '(                                                           :which-key "refactor"                         :ignore t)
    "ls"  '(                                                           :which-key "sessions"                         :ignore t)
    "lT"  '(                                                           :which-key "toggle"                           :ignore t)

    "n"   '(                                                           :which-key "numbers"                          :ignore t)
    "n+"  '(fb/inc-at-pt                                               :which-key "+"                                )
    "n="  '(fb/inc-at-pt                                               :which-key "+"                                )
    "n-"  '(fb/dec-at-pt                                               :which-key "-"                                )
    "n_"  '(fb/dec-at-pt                                               :which-key "-"                                )

    "o"   '(                                                           :which-key "org"                              :ignore t)
    "oa"  '(org-agenda                                                 :which-key "agenda"                           )
    "oc"  '(org-capture                                                :which-key "capture"                          )
    "ol"  '(org-store-link                                             :which-key "store-link"                       )

    "oi"  '(                                                                      :which-key "go2file"               :ignore t)
    "oiu" '((lambda()(interactive)(find-file "~/NOTES/AKTUELLES.org"           )) :which-key "AKTUELLES"             )
    "oi1" '((lambda()(interactive)(find-file "~/NOTES/〇/1  UNSORTIERTES.org"   )) :which-key "UNSORTIERTES"          )
    "oi2" '((lambda()(interactive)(find-file "~/NOTES/〇/2  IDEEN.org"          )) :which-key "IDEEN"                 )
    "oi3" '((lambda()(interactive)(find-file "~/NOTES/〇/3  FRAGEN.org"         )) :which-key "FRAGEN"                )
    "oi4" '((lambda()(interactive)(find-file "~/NOTES/〇/4  RECHERCHE.org"      )) :which-key "RECHERCHE"             )
    "oi5" '((lambda()(interactive)(find-file "~/NOTES/〇/5  BIBLIO~.org"        )) :which-key "BIBLIO~"               )
    "oi6" '((lambda()(interactive)(find-file "~/NOTES/〇/6  I.org"              )) :which-key "INFORMATION"           )
    "oi7" '((lambda()(interactive)(find-file "~/NOTES/〇/7  ToDO.org"           )) :which-key "TODO"                  )
    "oia" '((lambda()(interactive)(find-file "~/NOTES/〇/7a ANSCHAFFUNGEN.org"  )) :which-key "ANSCHAFFUNGEN"         )
    "oi8" '((lambda()(interactive)(find-file "~/NOTES/〇/8  INSTALLATIONEN.org" )) :which-key "INSTALLATIONEN"        )
    "oi9" '((lambda()(interactive)(find-file "~/NOTES/〇/9  ROUTINEN.org"       )) :which-key "ROUTINEN"              )
    "oi0" '((lambda()(interactive)(find-file "~/NOTES/〇/10 ERKENNTNISSE.org"   )) :which-key "ERKENNTNISSE"          )
    "oie" '((lambda()(interactive)(find-file "~/NOTES/〇/11 ERLEDIGTES.org"     )) :which-key "ERLEDIGTES"            )

    "p"   '(projectile-command-map                                     :which-key "projectile"                       )

    "r"   '(                                                           :which-key "re-~"                             :ignore t)
    "rc"  '(fb/literate-recompile                                      :which-key "recompile-emacs.d"                )
    "rd"   '(                                                          :which-key "reloadDirLocals"                  :ignore t)
    "rdb" '(fb/reload-dir-locals-current-buffer                        :which-key "reloadDirLocalsCurrentBuffer"     )
    "rda" '(fb/reload-dir-locals-all-directory-buffer                  :which-key "reloadDirLocalsDirBuffer"         )
    "rf"  '(                                                           :which-key "reformat"                         :ignore t)
    "rfh" '(fb/break-here                                              :which-key "break-here"                       )
    "rfc" '(fb/break-sub-sentence                                      :which-key "break-sub"                        )
    "rfs" '(fb/break-sentence                                          :which-key "break-sentence"                   )

    "rr"  '(redraw-display                                             :which-key "redraw-display"                   )
    "rl"  '(fb/reload-config                                           :which-key "reload init.el"                   )

    "t"   '(                                                           :which-key "toggles"                          :ignore t)
    "ti"  '(imenu-list-smart-toggle                                    :which-key "imenu"                            )
    "tl"  '(toggle-truncate-lines                                      :which-key "truncate-lines"                   )
    "tm"  '(treemacs                                                   :which-key "treemacs"                         )
    "tn"  '(display-line-numbers-mode                                  :which-key "line-numbers"                     )
    "tt"  '(counsel-load-theme                                         :which-key "choose theme"                     )
    "tw"  '(whitespace-mode                                            :which-key "whitespace"                       )
    "T"   '(                                                           :which-key "toggles"                          :ignore t)
    "TW"  '(fb/toggle-which-key-sort-order                             :which-key "whickKey-sort-order"              )

    "xa"   '(                                                          :which-key "align"                            :ignore t)
    "xa%"  '(spacemacs/align-repeat-percent                            :which-key "repeat-percent"                   )
    "xa&"  '(spacemacs/align-repeat-ampersand                          :which-key "repeat-ampersand"                 )
    "xa("  '(spacemacs/align-repeat-left-paren                         :which-key "repeat-left-paren"                )
    "xa)"  '(spacemacs/align-repeat-right-paren                        :which-key "repeat-right-paren"               )
    "xa{"  '(spacemacs/align-repeat-left-curly-brace                   :which-key "repeat-left-curly-brace"          )
    "xa}"  '(spacemacs/align-repeat-right-curly-brace                  :which-key "repeat-right-curly-brace"         )
    "xa["  '(spacemacs/align-repeat-left-square-brace                  :which-key "repeat-left-square-brace"         )
    "xa]"  '(spacemacs/align-repeat-right-square-brace                 :which-key "repeat-right-square-brace"        )
    "xa,"  '(spacemacs/align-repeat-comma                              :which-key "repeat-comma"                     )
    "xa."  '(spacemacs/align-repeat-decimal                            :which-key "repeat-decimal"                   )
    "xa:"  '(spacemacs/align-repeat-colon                              :which-key "repeat-colon"                     )
    "xa;"  '(spacemacs/align-repeat-semicolon                          :which-key "repeat-semicolon"                 )
    "xa="  '(spacemacs/align-repeat-equal                              :which-key "repeat-equal"                     )
    "xa\\" '(spacemacs/align-repeat-backslash                          :which-key "repeat-backslash"                 )
    "xaa"  '(align                                                     :which-key "align"                            )
    "xac"  '(align-current                                             :which-key "align-current"                    )
    "xam"  '(spacemacs/align-repeat-math-oper                          :which-key "align-repeat-math-oper"           )
    "xar"  '(spacemacs/align-repeat                                    :which-key "align-repeat"                     )
    "xa|"  '(spacemacs/align-repeat-bar                                :which-key "align-repeat-bar"                 )
    "xc"   '(count-region                                              :which-key "count-region"                     )
    "xd"   '(                                                          :which-key "delete"                           )
    "xdl"  '(delete-blank-lines                                        :which-key "delete-blank-lines"               )
    "xdw"  '(delete-trailing-whitespace                                :which-key "delete-trailing-whitespace"       )
    "xj"   '(                                                          :which-key "justification"                    :ignore t)
    "xjc"  '(set-justification-center                                  :which-key "justification-center"             )
    "xjf"  '(set-justification-full                                    :which-key "justification-full"               )
    "xjl"  '(set-justification-left                                    :which-key "justification-left"               )
    "xjn"  '(set-justification-none                                    :which-key "justification-none"               )
    "xjr"  '(set-justification-right                                   :which-key "justification-right"              )
    "xl"   '(                                                          :which-key "sort-lines"                       )
    "xlc"  '(spacemacs/sort-lines-by-column                            :which-key "sort-lines-by-column"             )
    "xlC"  '(spacemacs/sort-lines-by-column-reverse                    :which-key "sort-lines-by-column-reverse"     )
    "xls"  '(spacemacs/sort-lines                                      :which-key "sort-lines"                       )
    "xlS"  '(spacemacs/sort-lines-reverse                              :which-key "sort-lines-reverse"               )
    "xlu"  '(spacemacs/uniquify-lines                                  :which-key "uniquify-lines"                   )
    "xt"   '(                                                          :which-key "transpose"                        )
    "xtc"  '(transpose-chars                                           :which-key "transpose-chars"                  )
    "xte"  '(transpose-sexps                                           :which-key "transpose-sexps"                  )
    "xtl"  '(transpose-lines                                           :which-key "transpose-lines"                  )
    "xtp"  '(transpose-paragraphs                                      :which-key "transpose-paragraphs"             )
    "xts"  '(transpose-sentences                                       :which-key "transpose-sentences"              )
    "xtw"  '(transpose-words                                           :which-key "transpose-words"                  )
    "xU"   '(upcase-region                                             :which-key "upcase-region"                    )
    "xu"   '(downcase-region                                           :which-key "downcase-region"                  )

    "y"   '(                                                           :which-key "yasnippets"                       :ignore t)
    "yy"  '(yas-insert-snippet                                         :which-key "insert"                           )
    "yr"  '(yas-reload-all                                             :which-key "reload-all"                       )

    "u"   '(undo-tree-visualize                                        :which-key "undotree"                         )

    "w"   '(                                                           :which-key "window"                           :ignore t)
    "ww"   '(writeroom-mode                                            :which-key "writeroom-toggle"                 )
    "we"  '(:keymap evil-window-map :package evil                      :which-key "evil-window"                      )

    ";"   '(counsel-switch-buffer                                      :which-key "switch-buffer"                    )
    )
#+end_src
