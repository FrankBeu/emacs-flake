#+STARTUP: content
* keys-keybindings
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; keys-keybindings
  ;;;;
  ;;
#+end_src
** INFO
*** find leader-keybindings in Spacemacs
#+begin_example shell
rg 'spacemacs/set-leader-keys(.*\n){0,4}.*COMMAND' -UA3
#+end_example
*** general
**** examples
https://github.com/noctuid/general.el#general-examples
***** example with test-message
#+begin_example elisp
   (general-define-key
    :keymaps '(
               <HAS-TO-END-WITH>-mode-map
               )
    :states  '(normal visual)
    :states  'motion
    "T" '(lambda () (message "test"))
    )
#+end_example
**** relations
***** ~evil-global-set-key~   ---   ~general-def~
#+begin_example elisp
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
#+end_example
#+begin_example elisp
  (general-def 'motion
    "k" 'evil-previous-visual-line
    )
#+end_example
***** ~define-key~   ---   ~general-define-key~
#+begin_example elisp
  (define-key evil-normal-state-map (kbd "h") 'evil-repeat-find-char)
#+end_example
#+begin_example elisp
  (general-define-key
   :keymaps '(evil-normal-state-map)
   ;; :states  '(normal visual)
   "h"   'evil-repeat-find-char
   )
#+end_example
***** ~evil-define-key 'motion~   ---   ~general-define-key :states 'motion~
#+begin_example elisp
  (evil-define-key 'motion undo-tree-visualizer-mode-map (kbd "k") 'undo-tree-visualize-undo)
  (evil-define-key 'motion undo-tree-visualizer-mode-map (kbd "l") 'undo-tree-visualize-redo)
#+end_example
#+begin_example elisp
  (general-define-key
     :keymaps '(undo-tree-visualizer-mode-map)
     :states  'motion
     "k" 'undo-tree-visualize-undo
     "l" 'undo-tree-visualize-redo
     )
#+end_example
*** prefix will stack
if a keymap is bound to a global-leader-key
do not define a prefix in this keymap
*** unbind key
=M-x= ~global-unset-key~
*** visual
in visual state always use evil-motion-bindings not the keymap-specific ones
cf. [[*ivy-occur][ivy-occur]]
*** evil-shadow
**** if the keybinding defined is shadowed by an evil-keybinding try
   ~:states  'motion~
**** try a restart with the compiled configuration
not all changes can be loaded 'inPlace' with =C-X C-E=
** evil
*** jkl;
**** ; -> h
#+begin_src elisp
  (general-define-key
   :keymaps '(evil-normal-state-map)
   ;; :states  '(normal visual)
   "h"   'evil-repeat-find-char
   )
#+end_src
**** jkl;
#+begin_src elisp
  (general-define-key
   :keymaps '(evil-motion-state-map)
   ;; :states  '(normal visual)
   "j" 'evil-backward-char
   "k" 'evil-previous-visual-line
   "l" 'evil-next-visual-line
   ";" 'evil-forward-char
   )
#+end_src
***** also in visual mode
#+begin_src elisp
  (general-define-key
   :keymaps '(evil-visual-state-map)
   "k" 'evil-previous-visual-line
   "l" 'evil-next-visual-line
   )
#+end_src
***** Use visual line motions even outside of visual-line-mode buffers
#+begin_src elisp
  (general-def 'motion
    "k" 'evil-previous-visual-line
    "l" 'evil-next-visual-line
    )
#+end_src
*** set initial-state for modes
#+begin_src elisp
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
#+end_src
*** digraphs
after *r* use  =C-K=
everywhere else digraphs are bound to =M-K=
because company completion will conflict with =C-K=
[[*remap interfering insert-digraph][remap interfering insert-digraph]]
** ESC
on prompts use:
=ESC= like =C-g=
#+begin_src elisp
  (general-define-key
   "<escape>" 'keyboard-escape-quit
   )
#+end_src
** avy
#+begin_src elisp
  (general-define-key
   "C-'"  'avy-goto-word-0
   "C-\"" 'avy-goto-line
   )
#+end_src
** bookmark-menu
#+begin_src elisp
  (general-define-key
   :keymaps '(
              bookmark-bmenu-mode-map
              )
   :states  '(normal visual)
   "j" 'evil-backward-char
   "k" 'evil-previous-visual-line
   "l" 'evil-next-visual-line

   "C-;" 'bookmark-bmenu-this-window
   )
#+end_src
** calfw
#+begin_src elisp
  (general-define-key
   :keymaps '(
              cfw:calendar-mode-map
              )
   ";"     'nil

   "j"     'cfw:navi-previous-day-command
   "k"     'cfw:navi-previous-week-command
   "l"     'cfw:navi-next-week-command
   ";"     'cfw:navi-next-day-command

   "K"     'cfw:navi-previous-month-command
   "L"     'cfw:navi-next-month-command

   "S-TAB" 'cfw:navi-prev-item-command
   "TAB"   'cfw:navi-next-item-command

   "d"     'cfw:change-view-day
   "w"     'cfw:change-view-week
   "f"     'cfw:change-view-two-weeks
   "m"     'cfw:change-view-month

   "r"     'cfw:refresh-calendar-buffer
   "h"     'cfw:org-goto-date
   "x"     'cfw:org-clean-exit


   "SPC"   'cfw:show-details-command            ;; show in agenda
   "RET"   'cfw:org-onclick                     ;; jump
   )
#+end_src
** company
*** company-mode-map
#+begin_src elisp
  (general-define-key
   :keymaps '(
              company-mode-map
              )
   "C-j" 'nil
   "C-j" 'company-indent-or-complete-common
   "C-k" 'nil
   "C-K" 'nil
   "C-k" 'company-select-previous
   "C-l" 'nil
   "C-l" 'company-select-next
   "C-;" 'nil
   "C-;" 'fb/company-complete-selection

   "C-J"   'yas-prev-field
   "C-:"   'yas-next-field-or-maybe-expand
   "C-M-:" 'yas-expand-from-trigger-key
   )
#+end_src
**** remap interfering insert-digraph
=C-k= -> =M-k=
#+begin_src elisp
  (general-define-key
   :keymaps '(evil-insert-state-map)
   ;;;; :states  '(normal visual) WILL not work with states
   "C-k" 'nil
   "M-k" 'evil-insert-digraph
   )
#+end_src
** company-active
#+begin_src elisp
  (general-define-key
   :keymaps '(
              company-active-map
              ;; company-search-map
              )
   ;; "C-j" 'nil
   ;; "C-j" 'company-complete-selection
   "C-k" 'nil
   "C-k" 'company-select-previous
   "C-l" 'nil
   "C-l" 'company-select-next
   "C-;" 'nil
   "C-;" 'fb/company-complete-selection
   )
#+end_src
*** FUNDUS
  #+begin_src elisp :tangle no
  ;; (define-key company-search-map (kbd "C-t") 'company-search-toggle-filtering)
  #+end_src
** counsel
#+begin_src elisp
  (general-define-key
   :keymaps '(minibuffer-local-map)
   ;; :states  '(normal visual)
   "C-r"    'counsel-minibuffer-history
   )
#+end_src
** dap
*** sessions
https://emacs-lsp.github.io/dap-mode/page/how-to/#stop-and-delete-sessions
** dired
#+begin_src elisp
  (general-define-key
   :keymaps '(dired-mode-map)
   :states  '(normal visual)
   ;; "j" 'nil
   ";"      'nil
   )

  (general-define-key
   :keymaps '(dired-mode-map)
   :states  '(normal visual)
   ;; "j" 'nil
   "H"      'dired-hide-dotfiles-mode
   ";"      'dired-find-file
   "j"      'dired-single-up-directory
   "r"      'dired-rifle
   )

  (general-define-key
   :keymaps '(dired-mode-map)
   :states  '(normal visual)
   :prefix  "g"
   "R"      'dired-do-redisplay
   )

  (general-define-key
   :keymaps '(dired-mode-map)
   :states  '(normal visual)
   :prefix  "h"
   "d"      'epa-dired-do-decrypt
   "e"      'epa-dired-do-encrypt
   "s"      'epa-dired-do-sign
   "v"      'epa-dired-do-verify
   )
#+end_src
** emoji
#+begin_src elisp
  (general-define-key
   :keymaps '(emoji-list-mode-map)
   :states  'motion
   "RET"    'nil
   "RET"    'emoji-list-select
   )
#+end_src
** imenu
#+begin_src elisp
  (general-define-key
   :keymaps '(imenu-list-major-mode-map)
   "<C-return>" 'imenu-list-display-entry
   "M-RET"      'imenu-list-display-entry
   )
#+end_src
** ivy
#+begin_src elisp
  (general-define-key
   :keymaps '(counsel-ag-map
              counsel-git-grep-map
              counsel-grep-map
              counsel-imenu-map
              )
   "C-l" 'nil
   "C-l" 'ivy-next-line
   "C-S-l" 'ivy-call-and-recenter
   )

  (general-define-key
   :keymaps '(ivy-minibuffer-map)
   "C-k" 'ivy-previous-line
   "C-l" 'ivy-next-line
   "C-;" 'ivy-alt-done
   "TAB" 'ivy-alt-done
   )

  (general-define-key
   :keymaps '(ivy-switch-buffer-map)
   "C-k" 'ivy-previous-line
   "C-;" 'ivy-done
   "C-d" 'ivy-switch-buffer-kill
   )

  (general-define-key
   :keymaps '(ivy-reverse-i-search-map)
   "C-k" 'ivy-previous-line
   "C-d" 'ivy-reverse-i-search-kill
   )
#+end_src
*** ivy-occur
map for buffer opened to show all ivy candidates (=C-c C-o=)
#+begin_src elisp
  (general-define-key
   :keymaps '(
              ivy-occur-grep-mode-map
              ivy-occur-mode-map
              )
   :states  '(normal visual)
   "j"     'nil
   "k"     'nil
   "l"     'nil
   ";"     'nil
   "j"     'evil-backward-char
   "k"     'ivy-occur-previous-line
   "l"     'ivy-occur-next-line
   ";"     'evil-forward-char
   )

  (general-define-key
   :keymaps '(
              ivy-occur-grep-mode-map
              ivy-occur-mode-map
              )
   :states  '(visual)
   "k"     'nil
   "l"     'nil
   "k"     'evil-previous-visual-line
   "l"     'evil-next-visual-line
   )
#+end_src
** jsonnet
#+begin_src elisp
;; (general-define-key
;;  :keymaps '(jsonnet-mode-map
;;             )
;;  "C-l" 'nil
;;  )
(fb/local-leader-key
  :keymaps 'jsonnet-mode-map
  :states  '(normal visual insert)

  ;; "b"      '(                                                   :which-key "table"            :ignore t)
  "="      '(jsonnet-reformat-buffer                            :which-key "format"           )
  )
#+end_src
** lisp
#+begin_src elisp
  (general-define-key
   "C-M-x" 'eval-last-sexp
   )
#+end_src
** lsp
*** lsp-command-map
#+begin_src elisp
  (general-define-key
   :keymaps '(lsp-command-map)
   ;; "i"  '(:ignore t :which-key "ivy/imenu") ;;; defined in fb/leader-key
   "ii"  'lsp-ivy-workspace-symbol
   "im"  'lsp-ui-imenu
   ;; "t"  '(:ignore t  :which-key "treemacs") ;;; defined in fb/leader-key
   "ts" 'lsp-treemacs-symbols
   )
#+end_src
*** doc-frame-focus
**** focus
#+begin_src elisp
  (general-define-key
   :keymaps '(
             lsp-mode-map
             )
   "C-S-k" 'lsp-ui-doc-focus-frame
    )
#+end_src
**** unfocus
#+begin_src elisp
  (general-define-key
   :keymaps '(
             lsp-ui-doc-frame-mode-map
              )
   "C-L" 'lsp-ui-doc-unfocus-frame
    )
#+end_src
** lsp-treemacs
*** error-list
#+begin_src elisp
  (general-define-key
   :keymaps '(
             lsp-treemacs-error-list-mode-map
              )
   "c" 'lsp-treemacs-cycle-severity
   "x" 'lsp-treemacs-quick-fix
    )
#+end_src
** magit
*** jkl;
#+begin_src elisp
  (general-define-key
   :keymaps '(magit-mode-map)
   :states  '(normal visual)
   "j" 'nil
   )

  (general-define-key
   :keymaps '(magit-status-mode-map)
   "j" 'nil
   )

  (general-define-key
   :keymaps '(magit-status-mode-map)
   :states  '(normal visual)
   "h" 'magit-log
   )

  (general-define-key
   :keymaps 'magit-mode-map
   "h" 'magit-log
   "H" 'magit-log
   "j" 'evil-backward-char
   ;; "k" 'evil-previous-visual-line
   "l" 'evil-next-visual-line
   ;; ";" 'evil-forward-char
   "J" 'magit-status-jump
   )
#+end_src
*** navigation
#+begin_src elisp
  (general-define-key
   :keymaps 'magit-mode-map
   :states  '(normal visual)
   "gj" 'magit-section-up
   "gk" 'magit-section-backward-sibling
   "gl" 'magit-section-forward-sibling
   "g;" 'magit-section-forward
   "gvaj" 'magit-section-show-level-1-all
   "gvak" 'magit-section-show-level-2-all
   "gval" 'magit-section-show-level-3-all
   "gva;" 'magit-section-show-level-4-all
   "gvj" 'magit-section-show-level-1
   "gvk" 'magit-section-show-level-2
   "gvl" 'magit-section-show-level-3
   "gv;" 'magit-section-show-level-4
   )
#+end_src
*** rebase
#+begin_src elisp
  (general-define-key
   :keymaps 'git-rebase-mode-map
   :states  '(normal visual)
   "L" 'git-rebase-label
   "l" 'evil-next-line
   )
#+end_src
*** TODO spacemacs-keybindings
** orgmode-global
#+begin_src elisp
  (general-define-key
   :prefix "C-c"
   "L" 'org-store-link
   ;; "l" 'org-store-link
   "a" 'org-agenda
   "c" 'org-capture
   )
#+end_src
** origami
#+begin_src elisp
  (general-define-key
   :keymaps '(
              go-mode-map
	          json-mode-map
	          yaml-mode-map
              )
   "TAB"   'origami-recursively-toggle-node
   )
#+end_src
** solidity
#+begin_src elisp
  (fb/local-leader-key
    :keymaps 'solidity-mode-map
    :states  '(normal visual insert)

    "g"      '(solidity-estimate-gas-at-point :which-key "estimate-gas" )
    )
#+end_src
#+end_src
** swiper
#+begin_src elisp
  (general-define-key
   "C-s" 'swiper
   )
#+end_src
#+begin_src elisp
  (general-define-key
   :keymaps '(swiper-map)
   "C-l"   'nil
   )
  (general-define-key
   :keymaps '(swiper-map)
   "C-l"   'ivy-next-line
   "C-S-L" 'swiper-recenter-top-bottom
   )
#+end_src
*** TeX
#+BEGIN_SRC elisp
  (fb/local-leader-key
    :keymaps 'TeX-mode-map
    :states  '(normal visual insert)

    "c"      '(TeX-clean :which-key "clean")
    )
#+END_SRC
** treemacs
#+begin_src elisp
  (eval-after-load "treemacs-evil"
    '(progn
       (general-define-key
        :keymaps '(evil-treemacs-state-map treemacs-mode-map)
        "h" 'evil-forward-char
        "j" 'treemacs-root-up
        "k" 'treemacs-previous-line
        "l" 'treemacs-next-line
        ";" 'treemacs-root-down
        )

       (general-define-key
        :keymaps 'treemacs-mode-map
        :states 'treemacs
        "l" 'nil
        )

       (general-define-key
        :keymaps 'treemacs-mode-map
        :states 'treemacs
        "h" 'evil-forward-char
        "j" 'treemacs-root-up
        "k" 'treemacs-previous-line
        "l" 'treemacs-next-line
        ";" 'treemacs-root-down
        )))
#+end_src
** undo-tree
#+begin_src elisp
    (general-define-key
     :keymaps '(undo-tree-visualizer-mode-map)
     :states  'motion
     ;; "j" 'undo-tree-visualize-switch-branch-left        ;;; working
     "k" 'undo-tree-visualize-undo
     "l" 'undo-tree-visualize-redo
     ;; ";" 'undo-tree-visualize-switch-branch-right       ;;; working
     )
#+end_src
** which-key
#+begin_src elisp :tangle no
    (general-define-key
     :keymaps '(which-key-C-h-map)
     ;; :states  'motion
     ;; "j" 'undo-tree-visualize-switch-branch-left        ;;; working
     "C-M-:" 'which-key-show-next-page-cycle
     "C-M-J" 'which-key-show-previous-page-cycle
     "C-M-H" 'which-key-show-standard-help
     "C-M-D" 'which-key-toggle-docstrings
     "C-M-G" 'which-key-abort
     "C-M-U" 'which-key-undo-key
     )
#+end_src
** writeroom
#+begin_src elisp
  (general-define-key
   :keymaps '(writeroom-mode-map)
   "s-?"  'nil
   "M-m"   '(writeroom-toggle-mode-line :which-key "toggle-modeline")
   "C-M-<" 'writeroom-decrease-width
   "C-M->" 'writeroom-increase-width
   ;; "C-M-=" 'writeroom-adjust-width
   "C-M-=" '(writeroom-adjust-width :which-key "wr-with-=")
   )
#+end_src
*** TODO which-key not working
** xref
#+begin_src elisp
   (general-define-key
    :keymaps '(
               xref--xref-buffer-mode-map
               xref--button-map
               )
  ;; :states  'normal-state
    "C-;" 'xref-goto-xref
    )
#+end_src
xref--button-map
xref--xref-buffer-mode-map
