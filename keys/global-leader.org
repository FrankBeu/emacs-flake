#+STARTUP: content
* keys-global-leader
** marker
#+begin_src elisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; keys-global-leader
  ;;;;
  ;;
#+end_src
** global-leader =SPC=
#+begin_src elisp
  (fb/leader-key
    "!"   '(shell-command                                 :which-key "shell-command"                    )

    "b"   '(                                              :which-key "bookmars"                         :ignore t)
    "bj"  '(counsel-bookmark                              :which-key "jump"                             )
    "bs"  '(bookmark-set                                  :which-key "set"                              )
    "bl"  '(bookmark-bmenu-list                           :which-key "list"                             )

    "c"   '(                                              :which-key "comment"                          :ignore t)
    "cc"  '(evilnc-comment-operator                       :which-key "cmnt-operator"                    )
    "ci"  '(evilnc-toggle-invert-comment-line-by-line     :which-key "toggle-invert-cmnt-line-by-line"  )
    "cl"  '(evilnc-comment-or-uncomment-lines             :which-key "cmmnt-or-uncmnt-lines"            )
    "cp"  '(evilnc-comment-or-uncomment-paragraphs        :which-key "cmmnt-or-uncmnt-paragraphs"       )
    "cr"  '(comment-or-uncomment-region                   :which-key "cmmnt-or-uncmnt-region"           )
    "ct"  '(evilnc-quick-comment-or-uncomment-to-the-line :which-key "quick-cmmnt-or-uncmnt-to-the-line")
    "cy"  '(evilnc-copy-and-comment-lines                 :which-key "cp-and-cmnt-lines"                )

    "C"   '(                                              :which-key "command-log cal"                  :ignore t)
    "CA"  '(cfw:open-org-calendar                         :which-key "org-cal"                          )
    "CC"  '(fb/open-calendar                              :which-key "combined-cal"                     )
    "CS"  '(calendar                                      :which-key "show-cal"                         )
    "CL"  '(command-log-mode                              :which-key "toggle-local"                     )
    "CB"  '(clm/open-command-log-buffer                   :which-key "show-clm-buffer"                  )
    "CG"  '(global-command-log-mode                       :which-key "toggle-global"                    )

    "d"   '(                                              :which-key "dap"                              :ignore t)

    "d"   '(                                              :which-key "debug"                            :ignore t)
    "d."  '(dap-hydra                                     :which-key "hydra"                            )
    "d'"  '(dap-ui-repl                                   :which-key "repl"                             )
    "da"  '(                                              :which-key "abandon"                          )
    "daa" '(dap-disconnect                                :which-key "disconnect"                       )
    "daA" '(dap-delete-all-sessions                       :which-key "delete-all-sessions"              )
    "db"  '(                                              :which-key "breakpoints"                      :ignore t)
    "dbb" '(dap-breakpoint-toggle                         :which-key "bp-toggle"                        )
    "dbc" '(dap-breakpoint-condition                      :which-key "bp-condition"                     )
    "dbl" '(dap-breakpoint-log-message                    :which-key "bp-log-message"                   )
    "dbh" '(dap-breakpoint-hit-condition                  :which-key "bp-hit-cond"                      )
    "dba" '(dap-breakpoint-add                            :which-key "bp-add"                           )
    "dbd" '(dap-breakpoint-delete                         :which-key "bp-delete"                        )
    "dbD" '(dap-breakpoint-delete-all                     :which-key "bp-delete-all"                    )
    "dd"  '(                                              :which-key "debugging"                        :ignore t)
    "ddd" '(dap-debug                                     :which-key "debug"                            )
    "dde" '(dap-debug-edit-template                       :which-key "edit-template"                    )
    "ddl" '(dap-debug-last                                :which-key "last"                             )
    "ddr" '(dap-debug-recent                              :which-key "recent"                           )
    "de"  '(                                              :which-key "eval"                             :ignore t)
    "dee" '(dap-eval                                      :which-key "eval"                             )
    "der" '(dap-eval-region                               :which-key "eval-region"                      )
    "det" '(dap-eval-thing-at-point                       :which-key "eval-thing-at-point"              )
    "det" '(dap-ui-expressions-add                        :which-key "ui-expressions-add"               )
    "dI"  '(                                              :which-key "inspect"                          :ignore t)
    "dIi" '(dap-ui-inspect                                :which-key "ui-inspect"                       )
    "dIr" '(dap-ui-inspect-region                         :which-key "ui-inspect-region"                )
    "dIt" '(dap-ui-inspect-thing-at-point                 :which-key "ui-inspect-thing-at-point"        )

    "dc"  '(dap-continue                                  :which-key "continue"                         )
    "di"  '(dap-step-in                                   :which-key "step-in"                          )
    "dls" '(dap-tm-loaded-sources                         :which-key "sources"                          )
    "dlv" '(dap-ui-set-variable-value                     :which-key "set-variable-value"               )
    "do"  '(dap-step-out                                  :which-key "step-out"                         )
    "dr"  '(dap-restart-frame                             :which-key "restart-frame"                    )
    "ds"  '(dap-next                                      :which-key "next"                             )
    "dv"  '(dap-ui-inspect-thing-at-point                 :which-key "ui-inspect-thing-at-point"        )
    "dS"  '(                                              :which-key "switch"                           :ignore t)
    "dSs" '(dap-switch-session                            :which-key "switch-session"                   )
    "dSt" '(dap-switch-thread                             :which-key "switch-thread"                    )
    "dSf" '(dap-switch-frame                              :which-key "switch-frame"                     )
    "dT"  '(                                              :which-key "toggles"                          :ignore t)
    "dTm" '(spacemacs/toggle-dap-mouse                    :which-key "mouse"                            )
    "dw"  '(                                              :which-key "windows"                          :ignore t)
    "dwo" '(dap-go-to-output-buffer                       :which-key "go-to-output-buffer"              )
    "dwl" '(dap-ui-locals                                 :which-key "ui-locals"                        )
    "dws" '(dap-ui-sessions                               :which-key "ui-sessions"                      )
    "dwb" '(dap-ui-breakpoints                            :which-key "ui-breakpoints"                   )

    ;; "D"   '(                                              :which-key "delete"                           :ignore t)

    "e"   '(                                              :which-key "error"                            :ignore t)
    "e?"  '(flycheck-describe-checker                     :which-key "describe-checker"                 )
    "eH"  '(display-local-help                            :which-key "local-help"                       )
    "el"  '(spacemacs/goto-flycheck-error-list            :which-key "goto-list"                        )
    "eM"  '(flycheck-compile                              :which-key "compile"                          )
    "eS"  '(flycheck-set-checker-executable               :which-key "set-checker-executable"           )
    "eV"  '(flycheck-version                              :which-key "version"                          )
    "eb"  '(flycheck-buffer                               :which-key "buffer"                           )
    "ec"  '(flycheck-clear                                :which-key "clear"                            )
    "ee"  '(flycheck-explain-error-at-point               :which-key "explain-at-point"                 )
    "ei"  '(flycheck-manual                               :which-key "manual"                           )
    "et"  '(fb/toggle-flycheck-error-buffer               :which-key "toggle-list"                      )
    "en"  '(flycheck-next-error                           :which-key "next"                             )
    "ep"  '(flycheck-previous-error                       :which-key "previous"                         )
    "es"  '(flycheck-select-checker                       :which-key "select-checker"                   )
    "ev"  '(flycheck-verify-setup                         :which-key "verify-setup"                     )
    "ex"  '(flycheck-disable-checker                      :which-key "disable"                          )
    "ey"  '(flycheck-copy-errors-as-kill                  :which-key "copy-errors"                      )

    "f"   '(                                              :which-key "fast/file"                        :ignore t)
    "fy"  '(fb/yank-buffer-filename                       :which-key "yank-name"                        )
    "ff"  '(counsel-find-file                             :which-key "find"                             )
    "fs"  '(save-buffer                                   :which-key "save-buffer"                      )
    "fS"  '(save-some-buffers                             :which-key "save-some-buffer"                 )

    "g"   '(                                              :which-key "git"                              :ignore t)
    "gb"  '(spacemacs/git-blame-transient-state/body      :which-key "blameTransient"                   )
    "gc"  '(magit-clone                                   :which-key "clone"                            )
    "gfl" '(magit-log-buffer-file                         :which-key "logs"                             )
    "gfd" '(magit-diff                                    :which-key "diff"                             )
    "gi"  '(magit-init                                    :which-key "init"                             )
    "gL"  '(magit-list-repositories                       :which-key "repolist"                         )
    "gm"  '(magit-dispatch                                :which-key "dispatch"                         )
    "gs"  '(magit-status                                  :which-key "status"                           )
    "gS"  '(magit-stage-file                              :which-key "stage"                            )
    "gU"  '(magit-unstage-file                            :which-key "unstage"                          )

    "G"   '(                                              :which-key "go"                               :ignore t)
    "GB"  '(browse-url                                    :which-key "browser"                          )
    "GF"  '(browse-url-of-file                            :which-key "browser"                          )

    "i"   '(                                              :which-key "imenu"                            :ignore t)
    "ii"  '(imenu-list                                    :which-key "imenulist"                        )

    "j"   '(dired-jump                                    :which-key "dired"                            )

    "L"   '(                                              :which-key "lsp"                              :ignore t)
    "LD"  '(xref-find-definitions                         :which-key "find-def"                         )
    "LR"  '(xref-find-references                          :which-key "find-ref"                         )
    "LN"  '(lsp-ui-find-next-reference                    :which-key "next-ref"                         )
    "LP"  '(lsp-ui-find-prev-reference                    :which-key "prev-ref"                         )
    "LS"  '(counsel-imenu                                 :which-key "counsel0imenu"                    )
    "LE"  '(lsp-ui-flycheck-list                          :which-key "list"                             )
    "LS"  '(lsp-ui-sideline-mode                          :which-key "sideline"                         )
    "LX"  '(lsp-execute-code-action                       :which-key "action"                           )
    "LL"  '(lsp                                           :which-key "start-lsp"                        )

    "l"   '(:keymap lsp-command-map :package lsp-mode     :which-key "lsp"                              )
    "l="  '(                                              :which-key "formatting"                       :ignore t)
    "lF"  '(                                              :which-key "folders"                          :ignore t)
    "lG"  '(                                              :which-key "peeks"                            :ignore t)
    "lT"  '(                                              :which-key "toggles"                          :ignore t)
    "la"  '(                                              :which-key "actions"                          :ignore t)
    "lg"  '(                                              :which-key "goto"                             :ignore t)
    "lgG" '(xref-find-definitions-other-window            :which-key "definition-other-window"          )
    "lh"  '(                                              :which-key "help"                             :ignore t)
    "lr"  '(                                              :which-key "refactoring"                      :ignore t)
    "lw"  '(                                              :which-key "workspace"                        :ignore t)
    ;; "li"  '(                                              :which-key "ivy/imenu"                        :ignore t)
    ;; "lt"  '(                                              :which-key "treemacs"                         :ignore t)
    ;; "ltc" '(lsp-treemacs-call-hierarchy                   :which-key "call-hierarchy"                   )
    ;; "lte" '(lsp-treemacs-errors-list                      :which-key "errors"                           )
    ;; "lti" '(lsp-treemacs-implementations                  :which-key "implementations"                  )
    ;; "ltr" '(lsp-treemacs-references                       :which-key "references"                       )
    ;; "ltt" '(lsp-treemacs-type-hierarchy                   :which-key "type-hierarchy"                   )
    ;; "ltx" '(lsp-treemacs-quick-fix                        :which-key "quickfix"                         )
    ;; ;; "lts" '(lsp-treemacs-symbols                          :which-key "symbols"                          ) ;; already implemented in lsp-mode-map

    ;; "l="  '(                                              :which-key "formatting"                       :ignore t)
    ;; "la"  '(                                              :which-key "code actions"                     :ignore t)
    ;; "lF"  '(                                              :which-key "folders"                          :ignore t)
    ;; "lG"  '(                                              :which-key "peek"                             :ignore t)
    ;; "lg"  '(                                              :which-key "goto"                             :ignore t)
    ;; "lh"  '(                                              :which-key "help"                             :ignore t)
    ;; "lr"  '(                                              :which-key "refactor"                         :ignore t)
    ;; "ls"  '(                                              :which-key "sessions"                         :ignore t)
    ;; "lT"  '(                                              :which-key "toggle"                           :ignore t)
    ;; "lx"  '(lsp-execute-code-action                       :which-key "action"                           )

    "n"   '(                                              :which-key "numbers"                          :ignore t)
    "n+"  '(fb/inc-at-pt                                  :which-key "+"                                )
    "n="  '(fb/inc-at-pt                                  :which-key "+"                                )
    "n-"  '(fb/dec-at-pt                                  :which-key "-"                                )
    "n_"  '(fb/dec-at-pt                                  :which-key "-"                                )

    "o"   '(                                              :which-key "org"                              :ignore t)
    "oa"  '(org-agenda                                    :which-key "agenda"                           )
    "oc"  '(org-capture                                   :which-key "capture"                          )
    "ol"  '(org-store-link                                :which-key "store-link"                       )
    "ok"  '(org-open-at-point-global                      :which-key "follow-link"                      )

    "oi"  '(                                                                      :which-key "go2file"               :ignore t)
    "oiu" '((lambda()(interactive)(find-file "~/NOTES/AKTUELLES.org"           )) :which-key "AKTUELLES"             )
    "oi1" '((lambda()(interactive)(find-file "~/NOTES/〇/1  UNSORTIERTES.org"   )) :which-key "UNSORTIERTES"          )
    "oi2" '((lambda()(interactive)(find-file "~/NOTES/〇/2  IDEEN.org"          )) :which-key "IDEEN"                 )
    "oi3" '((lambda()(interactive)(find-file "~/NOTES/〇/3  FRAGEN.org"         )) :which-key "FRAGEN"                )
    "oi4" '((lambda()(interactive)(find-file "~/NOTES/〇/4  RECHERCHE.org"      )) :which-key "RECHERCHE"             )
    "oi5" '((lambda()(interactive)(find-file "~/NOTES/〇/5  BIBLIO~.org"        )) :which-key "BIBLIO~"               )
    "oi6" '((lambda()(interactive)(find-file "~/NOTES/〇/6  I.org"              )) :which-key "INFORMATION"           )
    "oi7" '((lambda()(interactive)(find-file "~/NOTES/〇/7  ToDO.org"           )) :which-key "TODO"                  )
    "oia" '((lambda()(interactive)(find-file "~/NOTES/〇/7a ANSCHAFFUNGEN.org"  )) :which-key "ANSCHAFFUNGEN"         )
    "oi8" '((lambda()(interactive)(find-file "~/NOTES/〇/8  INSTALLATIONEN.org" )) :which-key "INSTALLATIONEN"        )
    "oi9" '((lambda()(interactive)(find-file "~/NOTES/〇/9  ROUTINEN.org"       )) :which-key "ROUTINEN"              )
    "oi0" '((lambda()(interactive)(find-file "~/NOTES/〇/10 ERKENNTNISSE.org"   )) :which-key "ERKENNTNISSE"          )
    "oie" '((lambda()(interactive)(find-file "~/NOTES/〇/11 ERLEDIGTES.org"     )) :which-key "ERLEDIGTES"            )

    "p"   '(projectile-command-map                        :which-key "projectile"                       )

    "r"   '(                                              :which-key "re-~"                             :ignore t)
    "rc"  '(fb/literate-recompile                         :which-key "recompile-emacs.d"                )
    "rd"   '(                                             :which-key "reloadDirLocals"                  :ignore t)
    "rdb" '(fb/reload-dir-locals-current-buffer           :which-key "reloadDirLocalsCurrentBuffer"     )
    "rda" '(fb/reload-dir-locals-all-directory-buffer     :which-key "reloadDirLocalsDirBuffer"         )
    "rf"  '(                                              :which-key "reformat"                         :ignore t)
    "rfh" '(fb/break-here                                 :which-key "break-here"                       )
    "rfc" '(fb/break-sub-sentence                         :which-key "break-sub"                        )
    "rfs" '(fb/break-sentence                             :which-key "break-sentence"                   )

    "rr"  '(redraw-display                                :which-key "redraw-display"                   )
    "rl"  '(fb/reload-config                              :which-key "reload init.el"                   )

    "s"   '(                                              :which-key "move"                             :ignore t)
    "sb"  '(beginning-of-defun                            :which-key "func-bg"                          )
    "se"  '(end-of-defun                                  :which-key "func-be"                          )

    "S"   '(                                              :which-key "SMERGE"                           :ignore t)
    "SD"  '(                                              :which-key "DIFF"                             :ignore t)
    "SDA" '(smerge-diff-upper-lower                       :which-key "diff-upper-lower"                 )
    "SDB" '(smerge-diff-base-upper                        :which-key "diff-base-upper"                  )
    "SDE" '(smerge-ediff                                  :which-key "ediff"                            )
    "SDL" '(smerge-diff-base-lower                        :which-key "diff-base-lower"                  )
    "SK"  '(                                              :which-key "KEEP"                             :ignore t)
    "SKA" '(smerge-keep-all                               :which-key "keep-all"                         )
    "SKB" '(smerge-keep-base                              :which-key "keep-base"                        )
    "SKC" '(smerge-keep-current                           :which-key "keep-current"                     )
    "SKL" '(smerge-keep-lower                             :which-key "keep-lower"                       )
    "SKU" '(smerge-keep-upper                             :which-key "keep-upper"                       )
    "SN"  '(                                              :which-key "NAVIGATION"                       :ignore t)
    "SNN" '(smerge-next                                   :which-key "next"                             )
    "SNP" '(smerge-prev                                   :which-key "prev"                             )
    "SNV" '(smerge-vc-next-conflict                       :which-key "vc-next-conflict"                 )
    "SNR" '(smerge-refine                                 :which-key "refine"                           )
    "SR"  '(                                              :which-key "RESOLVE"                          :ignore t)
    "SRR" '(smerge-resolve                                :which-key "resolve"                          )
    "SRA" '(smerge-resolve-all                            :which-key "resolve-all"                      )
    "SM"  '(                                              :which-key "MENUE"                            :ignore t)
    "SMC" '(smerge-context-menu                           :which-key "context-menu"                     )
    "SMP" '(smerge-popup-context-menu                     :which-key "popup-context-menu"               )
    "SMM" '(smerge-mode-menu                              :which-key "mode-menu"                        )
    "SO"  '(                                              :which-key "OTHER"                            :ignore t)
    "SOK" '(smerge-kill-current                           :which-key "kill-current"                     )
    "SOU" '(smerge-makeup-conflict                        :which-key "makeup-conflict"                  )
    "SOS" '(smerge-start-session                          :which-key "start-session"                    )
    "SOC" '(smerge-combine-with-next                      :which-key "combine-with-next"                )
    "SOW" '(smerge-swap                                   :which-key "swap"                             )
    "SOA" '(smerge-auto-combine                           :which-key "auto-combine"                     )
    "SOM" '(smerge-mode                                   :which-key "mode"                             )

    "t"   '(                                              :which-key "toggles"                          :ignore t)
    "ti"  '(imenu-list-smart-toggle                       :which-key "imenu"                            )
    "tl"  '(toggle-truncate-lines                         :which-key "truncate-lines"                   )
    "tm"  '(treemacs                                      :which-key "treemacs"                         )
    "tn"  '(                                              :which-key "line-numbers"                     :ignore t)
    "tna" '(spacemacs/toggle-absolute-line-numbers        :which-key "line-absolute"                    )
    "tnr" '(spacemacs/toggle-relative-line-numbers        :which-key "line-relative"                    )
    "tnv" '(spacemacs/toggle-visual-line-numbers          :which-key "line-visual"                      )
    "tt"  '(counsel-load-theme                            :which-key "choose theme"                     )
    "tw"  '(whitespace-mode                               :which-key "whitespace"                       )
    "T"   '(                                              :which-key "toggles"                          :ignore t)
    "TW"  '(fb/toggle-which-key-sort-order                :which-key "whickKey-sort-order"              )

    "u"   '(undo-tree-visualize                           :which-key "undotree"                         )

    "w"   '(                                              :which-key "window"                           :ignore t)
    "wa"  '(aw-show-dispatch-help                         :which-key "ace-window"                       )
    "wb"  '(balance-windows                               :which-key "balance"                          )
    "wd"  '(ace-delete-window                             :which-key "ace-delete"                       )
    "we"  '(:keymap evil-window-map :package evil         :which-key "evil-window"                      )
    "wf"  '(aw-flip-window                                :which-key "flip"                             )
    "wg"  '(hydra-window-frame/body                       :which-key "frame"                            )
    "wh"  '(fb/aw-split-window-horz                       :which-key "split |"                          )
    "wi"  '(winner-mode                                   :which-key "winner-mode"                      )
    "wl"  '(hydra-window-size/body                        :which-key "resize"                           )
    "wm"  '(delete-other-windows                          :which-key "maximize"                         )
    "wo"  '(hydra-window-scroll/body                      :which-key "scroll"                           )
    "wp"  '(ace-swap-window                               :which-key "ace-swap"                         )
    "wr"  '(fb/winner-redo                                :which-key "winner-redo"                      )
    "ws"  '(ace-select-window                             :which-key "ace-select"                       )
    "wu"  '(fb/winner-undo                                :which-key "winner-undo"                      )
  ;;;; TODO harmonize with =SPW w e v=
  ;;;; cf. RESULT vs ACTION
    "wv"  '(fb/aw-split-window-vert                       :which-key "split -"                          )
    "ww"  '(writeroom-mode                                :which-key "writeroom-toggle"                 )
    "wx"  '(ace-delete-other-windows                      :which-key "ace-delete-other"                 )

    "xa"   '(                                             :which-key "align"                            :ignore t)
    "xa%"  '(spacemacs/align-repeat-percent               :which-key "repeat-percent"                   )
    "xa&"  '(spacemacs/align-repeat-ampersand             :which-key "repeat-ampersand"                 )
    "xa("  '(spacemacs/align-repeat-left-paren            :which-key "repeat-left-paren"                )
    "xa)"  '(spacemacs/align-repeat-right-paren           :which-key "repeat-right-paren"               )
    "xa{"  '(spacemacs/align-repeat-left-curly-brace      :which-key "repeat-left-curly-brace"          )
    "xa}"  '(spacemacs/align-repeat-right-curly-brace     :which-key "repeat-right-curly-brace"         )
    "xa["  '(spacemacs/align-repeat-left-square-brace     :which-key "repeat-left-square-brace"         )
    "xa]"  '(spacemacs/align-repeat-right-square-brace    :which-key "repeat-right-square-brace"        )
    "xa,"  '(spacemacs/align-repeat-comma                 :which-key "repeat-comma"                     )
    "xa."  '(spacemacs/align-repeat-decimal               :which-key "repeat-decimal"                   )
    "xa:"  '(spacemacs/align-repeat-colon                 :which-key "repeat-colon"                     )
    "xa;"  '(spacemacs/align-repeat-semicolon             :which-key "repeat-semicolon"                 )
    "xa="  '(spacemacs/align-repeat-equal                 :which-key "repeat-equal"                     )
    "xa\\" '(spacemacs/align-repeat-backslash             :which-key "repeat-backslash"                 )
    "xaa"  '(align                                        :which-key "align"                            )
    "xac"  '(align-current                                :which-key "align-current"                    )
    "xam"  '(spacemacs/align-repeat-math-oper             :which-key "align-repeat-math-oper"           )
    "xar"  '(spacemacs/align-repeat                       :which-key "align-repeat"                     )
    "xa|"  '(spacemacs/align-repeat-bar                   :which-key "align-repeat-bar"                 )
    "xc"   '(count-region                                 :which-key "count-region"                     )
    "xd"   '(                                             :which-key "delete"                           )
    "xdl"  '(delete-blank-lines                           :which-key "delete-blank-lines"               )
    "xdw"  '(delete-trailing-whitespace                   :which-key "delete-trailing-whitespace"       )

    "xi"   '(                                             :which-key "inflection"                       :ignore t)
    "xic"  '(string-inflection-lower-camelcase            :which-key "camel"                            )
    "xiC"  '(string-inflection-camelcase                  :which-key "camel-lower"                      )
    "xid"  '(fb/downcase-word                             :which-key "down"                             )
    "xiD"  '(fb/upcase-word                               :which-key "up"                               )
    "xii"  '(fb/string-inflection-all-cycle               :which-key "transient"                        )
    "xi."  '(fb/string-inflection-all-cycle               :which-key "transient"                        )
    "xi-"  '(string-inflection-kebab-case                 :which-key "kebab"                            )
    "xik"  '(string-inflection-kebab-case                 :which-key "kebab"                            )
    "xil"  '(downcase-region                              :which-key "downcase-region"                  )
    "xi_"  '(string-inflection-underscore                 :which-key "snake"                            )
    "xis"  '(string-inflection-underscore                 :which-key "snake"                            )
    "xit"  '(fb/titlecase-word                            :which-key "title"                            )
    "xiu"  '(string-inflection-capital-underscore         :which-key "snake-upper"                      )
    "xiU"  '(string-inflection-upcase                     :which-key "upper"                            )

    "xj"   '(                                             :which-key "justification"                    :ignore t)
    "xjc"  '(set-justification-center                     :which-key "justification-center"             )
    "xjf"  '(set-justification-full                       :which-key "justification-full"               )
    "xjl"  '(set-justification-left                       :which-key "justification-left"               )
    "xjn"  '(set-justification-none                       :which-key "justification-none"               )
    "xjr"  '(set-justification-right                      :which-key "justification-right"              )
    "xl"   '(                                             :which-key "sort-lines"                       )
    "xlc" '(spacemacs/sort-lines-by-column                :which-key "sort-lines-by-column"             )
    "xlC" '(spacemacs/sort-lines-by-column-reverse        :which-key "sort-lines-by-column-reverse"     )
    "xls" '(spacemacs/sort-lines                          :which-key "sort-lines"                       )
    "xlS" '(spacemacs/sort-lines-reverse                  :which-key "sort-lines-reverse"               )
    "xlu" '(spacemacs/uniquify-lines                      :which-key "uniquify-lines"                   )
    "xt"  '(                                              :which-key "transpose"                        )
    "xtc" '(transpose-chars                               :which-key "transpose-chars"                  )
    "xte" '(transpose-sexps                               :which-key "transpose-sexps"                  )
    "xtl" '(transpose-lines                               :which-key "transpose-lines"                  )
    "xtp" '(transpose-paragraphs                          :which-key "transpose-paragraphs"             )
    "xts" '(transpose-sentences                           :which-key "transpose-sentences"              )
    "xtw" '(transpose-words                               :which-key "transpose-words"                  )
    "xU"  '(upcase-region                                 :which-key "upcase-region"                    )
    "xu"  '(downcase-region                               :which-key "downcase-region"                  )

    "X"    '(                                             :which-key "insert"                           :ignore t)
    "XI*"  '(insert-char                                  :which-key "insert unicode"                   )

    "y"   '(                                              :which-key "yasnippets"                       :ignore t)
    "yy"  '(yas-insert-snippet                            :which-key "insert"                           )
    "yr"  '(yas-reload-all                                :which-key "reload-all"                       )
    "yv"  '(yas-visit-snippet-file                        :which-key "visit"                            )

    "z"   '(                                              :which-key "fold"                             :ignore t)
    "zc"  '(fb/close-fold                                 :which-key "close"                            )
    "zo"  '(fb/open-fold                                  :which-key "open"                             )

    ";"   '(counsel-switch-buffer                         :which-key "switch-buffer"                    )
    )
#+end_src
